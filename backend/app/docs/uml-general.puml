@startuml
note as Fecha
UML general
Ultima edicion: 26/06/25 9:07
end note


' Enums
enum eMetodoPago #ffd5ba {
  efectivo
  debito
  credito
  transferencia
}

enum eEstadoPago #ffd5ba {
  exito
  error
  reenbolsado
}

enum eEstadoEjercicio #ffdbfe {
  pendiente
  entregado
  calificado
}

enum ePresencialidad #baf5ba {
  online
  presencial
}

enum eNivel #baf5ba {
  principiante
  intermedio
  avanzado
}

' Clases
abstract class Usuario <<Entidad>> #baecf5 {
  - id: string
  - usuario: string
  - contraseña: string 
  - nombre: string
  - apellidos: string
  - dni: string
  - email : string
  - numeroTelefono: string
  + resetearContraseña()
}

class Profesor <<Entidad>> #baecf5 extends Usuario  {
  ..
  - clases: List<Clase>
}

class Alumno <<Entidad>> #baecf5 extends Usuario {
  - fechaInscripcion: LocalDateTime
  - matriculado: boolean
  ..
  - clases: List<Clase>
  - pagos: List<Pago>
  - entregas: List<EntregaEjercicio>
}

class Administrador <<Entidad>> #baecf5 extends Usuario {

}

class Pago <<Entidad>> #ffd5ba {
  - id: string
  - fechaPago : LocalDateTime
  - importe : float
  - metodoPago : eMetodoPago
  - estado: eEstadoPago
  ..
  - alumno: Alumno
  - items: List<ItemPago>
}

class ItemPago <<Agregado>> #ffd5ba {
  - id: string
  - descripcion: string
  - precioUnitario: float
  - cantidad: int
  - pago: Pago
  - clase: Clase
}


abstract class Clase <<Entidad>>  #baf5ba {
  - id: string
  - titulo : string
  - descripcion : string
  - precio : float
  - presencialidad : ePresencialidad
  - imagen_portada : string
  - nivel : eNivel
  ..
  - alumnos: List<Alumno>
  - profesores: List<Profesor>
  - ejercicios: List<Ejercicio>
  - material: List<Material>
}

class Material <<Agregado>> #baf5ba {
  - id: string
  - nombre: string
  - url: string
}

class Taller <<Entidad>> #baf5ba extends Clase  {
  - duracionHoras : int
  - fechaRealizacion: LocalDate
  - horaComienzo: LocalTime
}

class Curso <<Entidad>> #baf5ba extends Clase  {
  - fechaInicio : LocalDate
  - fechaFin : LocalDate
}

class Ejercicio <<Entidad>> #ffdbfe {
  - id: string
  - nombre: string
  - enunciado: string
  - fechaInicioPlazo: LocalDateTime
  - fechaFinalPlazo: LocalDateTime
  ..
  - clase: Clase
  - entregas: List<EntregaEjercicio>
}

class EntregaEjercicio <<Entidad>> #ffdbfe {
  - id: string
  - nota: float
  - fechaEntrega: LocalDateTime
  - estado: eEstadoEjercicio
  - archivosEntregados: List<File>
  ..
  - alumnoEntregante: Alumno
  - ejercicio: Ejercicio
}

' Notas
note as NotaClase
Clase es una clase abstracta
Taller y Curso la implementan
end note

note as NotaUsuario
La contraseña se encriptaria
con BCryptPasswordEncoder

El reseteo debería funcionar
mediante email
end note

note as NotaMatricula
La matricula viene 
derivada de un pago
Un alumno tiene una matrícula 
anual pagada una vez por año
end note

note as NotaPago
Un admin o profesor puede
registrar un pago manualmente
que se haya hecho en metálico
end note

' Relaciones
Clase "1..*" -- "1..*" Profesor
Clase "0..*" -- "0..*" Alumno
Clase::material "1" *- "1..*" Material
Clase "1" -- "0..*" Ejercicio
Pago "0..*" -- "1" Alumno 
EntregaEjercicio "0..*" -- Alumno
EntregaEjercicio "0..1" -- Ejercicio 
ItemPago "1..*" -* "1" Pago::items

' Relaciones Enums
eMetodoPago .. Pago
ePresencialidad .. Clase
eNivel .. Clase
eEstadoPago .. Pago
eEstadoEjercicio .. EntregaEjercicio

' Relaciones Notas
NotaClase .. Clase
NotaUsuario .. Usuario
NotaMatricula .. Alumno::matriculado
NotaPago .. Pago

' Layout control
eEstadoPago -[hidden]> eMetodoPago
eEstadoPago -[hidden]-> eMetodoPago
Material -r[hidden]- Curso
ItemPago -l[hidden]- Pago
Material -r[hidden]-Taller

@enduml