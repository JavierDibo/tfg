@startuml JPA Entity Relationships

!define ENTITY class
!define ABSTRACT_CLASS abstract class
!define ENUM enum

' Styling
skinparam class {
    BackgroundColor<<Entity>> LightBlue
    BackgroundColor<<Abstract>> LightYellow
    BackgroundColor<<Enum>> LightGreen
    BorderColor Black
    FontSize 10
}

' Inheritance Hierarchy
ABSTRACT_CLASS Usuario <<Abstract>> {
    +Long id
    +String username
    +String password
    +String firstName
    +String lastName
    +String dni
    +String email
    +String phoneNumber
    +Role role
    +boolean enabled
}

ENTITY Administrador <<Entity>> {
    +resetearpassword()
}

ENTITY Profesor <<Entity>> {
    +resetearpassword()
    +agregarClase(Clase)
    +removerClase(Clase)
    +imparteClase(Clase): boolean
    +imparteClasePorId(Long): boolean
    +getNumeroClases(): int
}

ENTITY Alumno <<Entity>> {
    +LocalDateTime enrollDate
    +boolean enrolled
    +resetPassword()
    +agregarClase(Clase)
    +removerClase(Clase)
    +estaInscritoEnClase(Clase): boolean
    +estaInscritoEnClasePorId(Long): boolean
}

' Class Hierarchy
ABSTRACT_CLASS Clase <<Abstract>> {
    +Long id
    +String title
    +String description
    +BigDecimal price
    +EPresencialidad format
    +String image
    +EDificultad difficulty
    +agregarAlumno(Alumno)
    +removerAlumno(Alumno)
    +agregarProfesor(Profesor)
    +removerProfesor(Profesor)
    +agregarEjercicio(Ejercicio)
    +removerEjercicio(Ejercicio)
    +agregarMaterial(Material)
    +removerMaterial(String)
}

ENTITY Curso <<Entity>> {
    +LocalDate fechaInicio
    +LocalDate fechaFin
    +getDuracionEnDias(): long
    +getDuracionEnSemanas(): long
    +estaEnProgreso(): boolean
    +haFinalizado(): boolean
    +noHaComenzado(): boolean
    +getPorcentajeProgreso(): double
}

ENTITY Taller <<Entity>> {
    +Integer duracionHoras
    +LocalDate fechaRealizacion
    +LocalTime horaComienzo
    +getHoraFinalizacion(): LocalTime
    +estaEnCurso(LocalDate, LocalTime): boolean
    +haFinalizado(): boolean
}

' Exercise and Submission Entities
ENTITY Ejercicio <<Entity>> {
    +Long id
    +String name
    +String statement
    +LocalDateTime startDate
    +LocalDateTime endDate
    +estaEnPlazo(): boolean
    +haVencido(): boolean
    +noHaComenzado(): boolean
    +obtenerEntregaDeAlumno(Alumno): EntregaEjercicio
    +contarEntregas(): int
    +contarEntregasCalificadas(): long
    +agregarEntrega(EntregaEjercicio)
}

ENTITY EntregaEjercicio <<Entity>> {
    +Long id
    +BigDecimal nota
    +LocalDateTime fechaEntrega
    +EEstadoEjercicio estado
    +List<String> archivosEntregados
    +String comentarios
    +agregarArchivo(String)
    +removerArchivo(String)
    +calificar(BigDecimal)
    +calificar(BigDecimal, String)
    +agregarComentarios(String)
    +tieneComentarios(): boolean
    +estaCalificada(): boolean
    +esFueraDePlazo(Ejercicio): boolean
    +contarArchivos(): int
    +marcarComoPendiente()
    +confirmarEntrega()
}

' Payment Entities
ENTITY Pago <<Entity>> {
    +Long id
    +LocalDateTime fechaPago
    +BigDecimal importe
    +EMetodoPago metodoPago
    +EEstadoPago estado
    +Boolean facturaCreada
    +String stripePaymentIntentId
    +String stripeChargeId
    +String failureReason
    +LocalDateTime fechaExpiracion
    +Long classId
    +agregarItem(ItemPago)
    +removerItem(String)
    +recalcularImporte()
    +puedeCrearFactura(): boolean
    +marcarComoFacturado()
    +esPagoManual(): boolean
    +procesarReembolso()
    +estaExpirado(): boolean
    +getNumeroItems(): int
    +calcularImporteTotalItems(): BigDecimal
}

ENTITY ItemPago <<Entity>> {
    +String id
    +String concepto
    +BigDecimal precioUnitario
    +Integer cantidad
    +getImporteTotal(): BigDecimal
}

ENTITY Material <<Entity>> {
    +String id
    +String name
    +String url
}

' Utility Classes
ENTITY FactoriaFacturacion <<Entity>> {
    +crearFacturaDesdePago(Pago): String
    +crearFacturasDesdeListaPago(List<Pago>): List<String>
    +crearTodasLasFacturas(List<Pago>): List<String>
    +contarPagosPendientesFacturacion(List<Pago>): long
}

' Enums
ENUM Role <<Enum>> {
    ADMIN
    PROFESOR
    ALUMNO
    USUARIO
}

ENUM EEstadoEjercicio <<Enum>> {
    PENDIENTE
    ENTREGADO
    CALIFICADO
}

ENUM EEstadoPago <<Enum>> {
    PENDIENTE
    EXITO
    FALLO
    REEMBOLSADO
}

ENUM EMetodoPago <<Enum>> {
    TARJETA
    EFECTIVO
    TRANSFERENCIA
}

ENUM EPresencialidad <<Enum>> {
    ONLINE
    PRESENCIAL
    HIBRIDO
}

ENUM EDificultad <<Enum>> {
    PRINCIPIANTE
    INTERMEDIO
    AVANZADO
}

' Inheritance Relationships
Usuario <|-- Administrador
Usuario <|-- Profesor
Usuario <|-- Alumno

Clase <|-- Curso
Clase <|-- Taller

' JPA Relationships

' Many-to-Many Relationships
Clase ||--o{ Alumno : "students"
Alumno ||--o{ Clase : "classes"

Clase ||--o{ Profesor : "teachers"
Profesor ||--o{ Clase : "classes"

Clase ||--o{ Material : "material"
Material ||--o{ Clase : "material"

' One-to-Many Relationships
Clase ||--o{ Ejercicio : "exercises"
Ejercicio }o--|| Clase : "clase"

Ejercicio ||--o{ EntregaEjercicio : "entregas"
EntregaEjercicio }o--|| Ejercicio : "ejercicio"

Alumno ||--o{ EntregaEjercicio : "submissions"
EntregaEjercicio }o--|| Alumno : "alumno"

Alumno ||--o{ Pago : "payments"
Pago }o--|| Alumno : "alumno"

Clase ||--o{ Pago : "payments"
Pago }o--|| Clase : "clase"

' Element Collections
Pago ||--o{ ItemPago : "items"
EntregaEjercicio ||--o{ String : "archivosEntregados"

' Utility Relationships
FactoriaFacturacion ..> Pago : "creates invoices from"

' Notes
note top of Usuario : "Single Table Inheritance\n@DiscriminatorColumn(name = 'tipo_usuario')"
note top of Clase : "Single Table Inheritance\n@DiscriminatorColumn(name = 'tipo_clase')"
note top of Pago : "Named Entity Graph\n@NamedEntityGraph(name = 'Pago.withItems')"
note top of ItemPago : "@Embeddable\nEmbedded in Pago"
note top of EntregaEjercicio : "@ElementCollection for files\n@CollectionTable for archivosEntregados"

@enduml
