/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FileInfo
 */
export interface FileInfo {
    /**
     * 
     * @type {string}
     * @memberof FileInfo
     */
    fileName?: string;
    /**
     * 
     * @type {string}
     * @memberof FileInfo
     */
    originalFileName?: string;
    /**
     * 
     * @type {string}
     * @memberof FileInfo
     */
    filePath?: string;
    /**
     * 
     * @type {string}
     * @memberof FileInfo
     */
    extension?: string;
    /**
     * 
     * @type {string}
     * @memberof FileInfo
     */
    contentType?: string;
    /**
     * 
     * @type {number}
     * @memberof FileInfo
     */
    fileSize?: number;
    /**
     * 
     * @type {string}
     * @memberof FileInfo
     */
    formattedSize?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FileInfo
     */
    isImage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FileInfo
     */
    isPdf?: boolean;
}

/**
 * Check if a given object implements the FileInfo interface.
 */
export function instanceOfFileInfo(value: object): value is FileInfo {
    return true;
}

export function FileInfoFromJSON(json: any): FileInfo {
    return FileInfoFromJSONTyped(json, false);
}

export function FileInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'fileName': json['fileName'] == null ? undefined : json['fileName'],
        'originalFileName': json['originalFileName'] == null ? undefined : json['originalFileName'],
        'filePath': json['filePath'] == null ? undefined : json['filePath'],
        'extension': json['extension'] == null ? undefined : json['extension'],
        'contentType': json['contentType'] == null ? undefined : json['contentType'],
        'fileSize': json['fileSize'] == null ? undefined : json['fileSize'],
        'formattedSize': json['formattedSize'] == null ? undefined : json['formattedSize'],
        'isImage': json['isImage'] == null ? undefined : json['isImage'],
        'isPdf': json['isPdf'] == null ? undefined : json['isPdf'],
    };
}

export function FileInfoToJSON(json: any): FileInfo {
    return FileInfoToJSONTyped(json, false);
}

export function FileInfoToJSONTyped(value?: FileInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'fileName': value['fileName'],
        'originalFileName': value['originalFileName'],
        'filePath': value['filePath'],
        'extension': value['extension'],
        'contentType': value['contentType'],
        'fileSize': value['fileSize'],
        'formattedSize': value['formattedSize'],
        'isImage': value['isImage'],
        'isPdf': value['isPdf'],
    };
}

