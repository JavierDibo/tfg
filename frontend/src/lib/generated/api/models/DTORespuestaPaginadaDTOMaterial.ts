/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DTOMaterial } from './DTOMaterial';
import {
    DTOMaterialFromJSON,
    DTOMaterialFromJSONTyped,
    DTOMaterialToJSON,
    DTOMaterialToJSONTyped,
} from './DTOMaterial';

/**
 * Generic paginated response
 * @export
 * @interface DTORespuestaPaginadaDTOMaterial
 */
export interface DTORespuestaPaginadaDTOMaterial {
    /**
     * List of elements for the current page
     * @type {Array<DTOMaterial>}
     * @memberof DTORespuestaPaginadaDTOMaterial
     */
    content: Array<DTOMaterial>;
    /**
     * Current page number (0-indexed)
     * @type {number}
     * @memberof DTORespuestaPaginadaDTOMaterial
     */
    page: number;
    /**
     * Page size
     * @type {number}
     * @memberof DTORespuestaPaginadaDTOMaterial
     */
    size: number;
    /**
     * Total number of elements
     * @type {number}
     * @memberof DTORespuestaPaginadaDTOMaterial
     */
    totalElements: number;
    /**
     * Total number of pages
     * @type {number}
     * @memberof DTORespuestaPaginadaDTOMaterial
     */
    totalPages: number;
    /**
     * Indicates if this is the first page
     * @type {boolean}
     * @memberof DTORespuestaPaginadaDTOMaterial
     */
    isFirst: boolean;
    /**
     * Indicates if this is the last page
     * @type {boolean}
     * @memberof DTORespuestaPaginadaDTOMaterial
     */
    isLast: boolean;
    /**
     * Indicates if the page has content
     * @type {boolean}
     * @memberof DTORespuestaPaginadaDTOMaterial
     */
    hasContent: boolean;
    /**
     * Field by which results are sorted
     * @type {string}
     * @memberof DTORespuestaPaginadaDTOMaterial
     */
    sortBy: string;
    /**
     * Sort direction
     * @type {string}
     * @memberof DTORespuestaPaginadaDTOMaterial
     */
    sortDirection: string;
}

/**
 * Check if a given object implements the DTORespuestaPaginadaDTOMaterial interface.
 */
export function instanceOfDTORespuestaPaginadaDTOMaterial(value: object): value is DTORespuestaPaginadaDTOMaterial {
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('page' in value) || value['page'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('totalElements' in value) || value['totalElements'] === undefined) return false;
    if (!('totalPages' in value) || value['totalPages'] === undefined) return false;
    if (!('isFirst' in value) || value['isFirst'] === undefined) return false;
    if (!('isLast' in value) || value['isLast'] === undefined) return false;
    if (!('hasContent' in value) || value['hasContent'] === undefined) return false;
    if (!('sortBy' in value) || value['sortBy'] === undefined) return false;
    if (!('sortDirection' in value) || value['sortDirection'] === undefined) return false;
    return true;
}

export function DTORespuestaPaginadaDTOMaterialFromJSON(json: any): DTORespuestaPaginadaDTOMaterial {
    return DTORespuestaPaginadaDTOMaterialFromJSONTyped(json, false);
}

export function DTORespuestaPaginadaDTOMaterialFromJSONTyped(json: any, ignoreDiscriminator: boolean): DTORespuestaPaginadaDTOMaterial {
    if (json == null) {
        return json;
    }
    return {
        
        'content': ((json['content'] as Array<any>).map(DTOMaterialFromJSON)),
        'page': json['page'],
        'size': json['size'],
        'totalElements': json['totalElements'],
        'totalPages': json['totalPages'],
        'isFirst': json['isFirst'],
        'isLast': json['isLast'],
        'hasContent': json['hasContent'],
        'sortBy': json['sortBy'],
        'sortDirection': json['sortDirection'],
    };
}

export function DTORespuestaPaginadaDTOMaterialToJSON(json: any): DTORespuestaPaginadaDTOMaterial {
    return DTORespuestaPaginadaDTOMaterialToJSONTyped(json, false);
}

export function DTORespuestaPaginadaDTOMaterialToJSONTyped(value?: DTORespuestaPaginadaDTOMaterial | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'content': ((value['content'] as Array<any>).map(DTOMaterialToJSON)),
        'page': value['page'],
        'size': value['size'],
        'totalElements': value['totalElements'],
        'totalPages': value['totalPages'],
        'isFirst': value['isFirst'],
        'isLast': value['isLast'],
        'hasContent': value['hasContent'],
        'sortBy': value['sortBy'],
        'sortDirection': value['sortDirection'],
    };
}

