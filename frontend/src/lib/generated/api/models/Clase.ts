/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Ejercicio } from './Ejercicio';
import {
    EjercicioFromJSON,
    EjercicioFromJSONTyped,
    EjercicioToJSON,
    EjercicioToJSONTyped,
} from './Ejercicio';
import type { Profesor } from './Profesor';
import {
    ProfesorFromJSON,
    ProfesorFromJSONTyped,
    ProfesorToJSON,
    ProfesorToJSONTyped,
} from './Profesor';
import type { Alumno } from './Alumno';
import {
    AlumnoFromJSON,
    AlumnoFromJSONTyped,
    AlumnoToJSON,
    AlumnoToJSONTyped,
} from './Alumno';
import type { Material } from './Material';
import {
    MaterialFromJSON,
    MaterialFromJSONTyped,
    MaterialToJSON,
    MaterialToJSONTyped,
} from './Material';

/**
 * 
 * @export
 * @interface Clase
 */
export interface Clase {
    /**
     * 
     * @type {number}
     * @memberof Clase
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Clase
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Clase
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Clase
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof Clase
     */
    format: ClaseFormatEnum;
    /**
     * 
     * @type {string}
     * @memberof Clase
     */
    image?: string;
    /**
     * 
     * @type {string}
     * @memberof Clase
     */
    difficulty: ClaseDifficultyEnum;
    /**
     * 
     * @type {Array<Alumno>}
     * @memberof Clase
     */
    students?: Array<Alumno>;
    /**
     * 
     * @type {Array<Profesor>}
     * @memberof Clase
     */
    teachers?: Array<Profesor>;
    /**
     * 
     * @type {Array<Ejercicio>}
     * @memberof Clase
     */
    exercises?: Array<Ejercicio>;
    /**
     * 
     * @type {Array<Material>}
     * @memberof Clase
     */
    material?: Array<Material>;
}


/**
 * @export
 */
export const ClaseFormatEnum = {
    Online: 'ONLINE',
    Presencial: 'PRESENCIAL',
    Hibrido: 'HIBRIDO'
} as const;
export type ClaseFormatEnum = typeof ClaseFormatEnum[keyof typeof ClaseFormatEnum];

/**
 * @export
 */
export const ClaseDifficultyEnum = {
    Principiante: 'PRINCIPIANTE',
    Intermedio: 'INTERMEDIO',
    Avanzado: 'AVANZADO'
} as const;
export type ClaseDifficultyEnum = typeof ClaseDifficultyEnum[keyof typeof ClaseDifficultyEnum];


/**
 * Check if a given object implements the Clase interface.
 */
export function instanceOfClase(value: object): value is Clase {
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('format' in value) || value['format'] === undefined) return false;
    if (!('difficulty' in value) || value['difficulty'] === undefined) return false;
    return true;
}

export function ClaseFromJSON(json: any): Clase {
    return ClaseFromJSONTyped(json, false);
}

export function ClaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Clase {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'price': json['price'],
        'format': json['format'],
        'image': json['image'] == null ? undefined : json['image'],
        'difficulty': json['difficulty'],
        'students': json['students'] == null ? undefined : ((json['students'] as Array<any>).map(AlumnoFromJSON)),
        'teachers': json['teachers'] == null ? undefined : ((json['teachers'] as Array<any>).map(ProfesorFromJSON)),
        'exercises': json['exercises'] == null ? undefined : ((json['exercises'] as Array<any>).map(EjercicioFromJSON)),
        'material': json['material'] == null ? undefined : ((json['material'] as Array<any>).map(MaterialFromJSON)),
    };
}

export function ClaseToJSON(json: any): Clase {
    return ClaseToJSONTyped(json, false);
}

export function ClaseToJSONTyped(value?: Clase | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'description': value['description'],
        'price': value['price'],
        'format': value['format'],
        'image': value['image'],
        'difficulty': value['difficulty'],
        'students': value['students'] == null ? undefined : ((value['students'] as Array<any>).map(AlumnoToJSON)),
        'teachers': value['teachers'] == null ? undefined : ((value['teachers'] as Array<any>).map(ProfesorToJSON)),
        'exercises': value['exercises'] == null ? undefined : ((value['exercises'] as Array<any>).map(EjercicioToJSON)),
        'material': value['material'] == null ? undefined : ((value['material'] as Array<any>).map(MaterialToJSON)),
    };
}

