/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Professor data
 * @export
 * @interface DTOProfesor
 */
export interface DTOProfesor {
    /**
     * Unique professor ID
     * @type {number}
     * @memberof DTOProfesor
     */
    id?: number;
    /**
     * Unique username
     * @type {string}
     * @memberof DTOProfesor
     */
    username: string;
    /**
     * Professor's first name
     * @type {string}
     * @memberof DTOProfesor
     */
    firstName: string;
    /**
     * Professor's last name
     * @type {string}
     * @memberof DTOProfesor
     */
    lastName: string;
    /**
     * Professor's DNI
     * @type {string}
     * @memberof DTOProfesor
     */
    dni: string;
    /**
     * Professor's email
     * @type {string}
     * @memberof DTOProfesor
     */
    email: string;
    /**
     * Phone number
     * @type {string}
     * @memberof DTOProfesor
     */
    phoneNumber?: string;
    /**
     * User role
     * @type {string}
     * @memberof DTOProfesor
     */
    role?: DTOProfesorRoleEnum;
    /**
     * Indicates if the account is enabled
     * @type {boolean}
     * @memberof DTOProfesor
     */
    enabled?: boolean;
    /**
     * List of assigned class IDs
     * @type {Array<number>}
     * @memberof DTOProfesor
     */
    classIds?: Array<number>;
    /**
     * Profile creation date
     * @type {Date}
     * @memberof DTOProfesor
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof DTOProfesor
     */
    fullName?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOProfesor
     */
    enabledStatus?: string;
    /**
     * 
     * @type {number}
     * @memberof DTOProfesor
     */
    classCount?: number;
}


/**
 * @export
 */
export const DTOProfesorRoleEnum = {
    Admin: 'ADMIN',
    Profesor: 'PROFESOR',
    Alumno: 'ALUMNO',
    Usuario: 'USUARIO'
} as const;
export type DTOProfesorRoleEnum = typeof DTOProfesorRoleEnum[keyof typeof DTOProfesorRoleEnum];


/**
 * Check if a given object implements the DTOProfesor interface.
 */
export function instanceOfDTOProfesor(value: object): value is DTOProfesor {
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('dni' in value) || value['dni'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    return true;
}

export function DTOProfesorFromJSON(json: any): DTOProfesor {
    return DTOProfesorFromJSONTyped(json, false);
}

export function DTOProfesorFromJSONTyped(json: any, ignoreDiscriminator: boolean): DTOProfesor {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'username': json['username'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'dni': json['dni'],
        'email': json['email'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'role': json['role'] == null ? undefined : json['role'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'classIds': json['classIds'] == null ? undefined : json['classIds'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'fullName': json['fullName'] == null ? undefined : json['fullName'],
        'enabledStatus': json['enabledStatus'] == null ? undefined : json['enabledStatus'],
        'classCount': json['classCount'] == null ? undefined : json['classCount'],
    };
}

export function DTOProfesorToJSON(json: any): DTOProfesor {
    return DTOProfesorToJSONTyped(json, false);
}

export function DTOProfesorToJSONTyped(value?: DTOProfesor | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'username': value['username'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'dni': value['dni'],
        'email': value['email'],
        'phoneNumber': value['phoneNumber'],
        'role': value['role'],
        'enabled': value['enabled'],
        'classIds': value['classIds'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'fullName': value['fullName'],
        'enabledStatus': value['enabledStatus'],
        'classCount': value['classCount'],
    };
}

