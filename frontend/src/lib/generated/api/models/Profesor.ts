/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GrantedAuthority } from './GrantedAuthority';
import {
    GrantedAuthorityFromJSON,
    GrantedAuthorityFromJSONTyped,
    GrantedAuthorityToJSON,
    GrantedAuthorityToJSONTyped,
} from './GrantedAuthority';
import type { Clase } from './Clase';
import {
    ClaseFromJSON,
    ClaseFromJSONTyped,
    ClaseToJSON,
    ClaseToJSONTyped,
} from './Clase';

/**
 * 
 * @export
 * @interface Profesor
 */
export interface Profesor {
    /**
     * 
     * @type {number}
     * @memberof Profesor
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Profesor
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof Profesor
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof Profesor
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof Profesor
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof Profesor
     */
    dni: string;
    /**
     * 
     * @type {string}
     * @memberof Profesor
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof Profesor
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Profesor
     */
    role?: ProfesorRoleEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Profesor
     */
    enabled?: boolean;
    /**
     * 
     * @type {Array<Clase>}
     * @memberof Profesor
     */
    classes?: Array<Clase>;
    /**
     * 
     * @type {number}
     * @memberof Profesor
     */
    numeroClases?: number;
    /**
     * 
     * @type {Array<GrantedAuthority>}
     * @memberof Profesor
     */
    authorities?: Array<GrantedAuthority>;
    /**
     * 
     * @type {boolean}
     * @memberof Profesor
     */
    accountNonLocked?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Profesor
     */
    accountNonExpired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Profesor
     */
    credentialsNonExpired?: boolean;
}


/**
 * @export
 */
export const ProfesorRoleEnum = {
    Admin: 'ADMIN',
    Profesor: 'PROFESOR',
    Alumno: 'ALUMNO',
    Usuario: 'USUARIO'
} as const;
export type ProfesorRoleEnum = typeof ProfesorRoleEnum[keyof typeof ProfesorRoleEnum];


/**
 * Check if a given object implements the Profesor interface.
 */
export function instanceOfProfesor(value: object): value is Profesor {
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('password' in value) || value['password'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('dni' in value) || value['dni'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    return true;
}

export function ProfesorFromJSON(json: any): Profesor {
    return ProfesorFromJSONTyped(json, false);
}

export function ProfesorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Profesor {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'username': json['username'],
        'password': json['password'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'dni': json['dni'],
        'email': json['email'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'role': json['role'] == null ? undefined : json['role'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'classes': json['classes'] == null ? undefined : ((json['classes'] as Array<any>).map(ClaseFromJSON)),
        'numeroClases': json['numeroClases'] == null ? undefined : json['numeroClases'],
        'authorities': json['authorities'] == null ? undefined : ((json['authorities'] as Array<any>).map(GrantedAuthorityFromJSON)),
        'accountNonLocked': json['accountNonLocked'] == null ? undefined : json['accountNonLocked'],
        'accountNonExpired': json['accountNonExpired'] == null ? undefined : json['accountNonExpired'],
        'credentialsNonExpired': json['credentialsNonExpired'] == null ? undefined : json['credentialsNonExpired'],
    };
}

export function ProfesorToJSON(json: any): Profesor {
    return ProfesorToJSONTyped(json, false);
}

export function ProfesorToJSONTyped(value?: Profesor | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'username': value['username'],
        'password': value['password'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'dni': value['dni'],
        'email': value['email'],
        'phoneNumber': value['phoneNumber'],
        'role': value['role'],
        'enabled': value['enabled'],
        'classes': value['classes'] == null ? undefined : ((value['classes'] as Array<any>).map(ClaseToJSON)),
        'numeroClases': value['numeroClases'],
        'authorities': value['authorities'] == null ? undefined : ((value['authorities'] as Array<any>).map(GrantedAuthorityToJSON)),
        'accountNonLocked': value['accountNonLocked'],
        'accountNonExpired': value['accountNonExpired'],
        'credentialsNonExpired': value['credentialsNonExpired'],
    };
}

