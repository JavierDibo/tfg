/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DTOMaterial } from './DTOMaterial';
import {
    DTOMaterialFromJSON,
    DTOMaterialFromJSONTyped,
    DTOMaterialToJSON,
    DTOMaterialToJSONTyped,
} from './DTOMaterial';
import type { DTOProfesor } from './DTOProfesor';
import {
    DTOProfesorFromJSON,
    DTOProfesorFromJSONTyped,
    DTOProfesorToJSON,
    DTOProfesorToJSONTyped,
} from './DTOProfesor';

/**
 * 
 * @export
 * @interface DTOClaseInscrita
 */
export interface DTOClaseInscrita {
    /**
     * 
     * @type {number}
     * @memberof DTOClaseInscrita
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof DTOClaseInscrita
     */
    titulo?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOClaseInscrita
     */
    descripcion?: string;
    /**
     * 
     * @type {number}
     * @memberof DTOClaseInscrita
     */
    precio?: number;
    /**
     * 
     * @type {string}
     * @memberof DTOClaseInscrita
     */
    presencialidad?: DTOClaseInscritaPresencialidadEnum;
    /**
     * 
     * @type {string}
     * @memberof DTOClaseInscrita
     */
    imagenPortada?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOClaseInscrita
     */
    nivel?: DTOClaseInscritaNivelEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof DTOClaseInscrita
     */
    alumnosId?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DTOClaseInscrita
     */
    profesoresId?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DTOClaseInscrita
     */
    ejerciciosId?: Array<string>;
    /**
     * 
     * @type {Array<DTOMaterial>}
     * @memberof DTOClaseInscrita
     */
    material?: Array<DTOMaterial>;
    /**
     * 
     * @type {string}
     * @memberof DTOClaseInscrita
     */
    tipoClase?: string;
    /**
     * 
     * @type {DTOProfesor}
     * @memberof DTOClaseInscrita
     */
    profesor?: DTOProfesor;
    /**
     * 
     * @type {Date}
     * @memberof DTOClaseInscrita
     */
    fechaInscripcion?: Date;
    /**
     * 
     * @type {number}
     * @memberof DTOClaseInscrita
     */
    numeroProfesores?: number;
    /**
     * 
     * @type {number}
     * @memberof DTOClaseInscrita
     */
    numeroAlumnos?: number;
}


/**
 * @export
 */
export const DTOClaseInscritaPresencialidadEnum = {
    Online: 'ONLINE',
    Presencial: 'PRESENCIAL',
    Hibrido: 'HIBRIDO'
} as const;
export type DTOClaseInscritaPresencialidadEnum = typeof DTOClaseInscritaPresencialidadEnum[keyof typeof DTOClaseInscritaPresencialidadEnum];

/**
 * @export
 */
export const DTOClaseInscritaNivelEnum = {
    Principiante: 'PRINCIPIANTE',
    Intermedio: 'INTERMEDIO',
    Avanzado: 'AVANZADO',
    Basico: 'BASICO'
} as const;
export type DTOClaseInscritaNivelEnum = typeof DTOClaseInscritaNivelEnum[keyof typeof DTOClaseInscritaNivelEnum];


/**
 * Check if a given object implements the DTOClaseInscrita interface.
 */
export function instanceOfDTOClaseInscrita(value: object): value is DTOClaseInscrita {
    return true;
}

export function DTOClaseInscritaFromJSON(json: any): DTOClaseInscrita {
    return DTOClaseInscritaFromJSONTyped(json, false);
}

export function DTOClaseInscritaFromJSONTyped(json: any, ignoreDiscriminator: boolean): DTOClaseInscrita {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'titulo': json['titulo'] == null ? undefined : json['titulo'],
        'descripcion': json['descripcion'] == null ? undefined : json['descripcion'],
        'precio': json['precio'] == null ? undefined : json['precio'],
        'presencialidad': json['presencialidad'] == null ? undefined : json['presencialidad'],
        'imagenPortada': json['imagenPortada'] == null ? undefined : json['imagenPortada'],
        'nivel': json['nivel'] == null ? undefined : json['nivel'],
        'alumnosId': json['alumnosId'] == null ? undefined : json['alumnosId'],
        'profesoresId': json['profesoresId'] == null ? undefined : json['profesoresId'],
        'ejerciciosId': json['ejerciciosId'] == null ? undefined : json['ejerciciosId'],
        'material': json['material'] == null ? undefined : ((json['material'] as Array<any>).map(DTOMaterialFromJSON)),
        'tipoClase': json['tipoClase'] == null ? undefined : json['tipoClase'],
        'profesor': json['profesor'] == null ? undefined : DTOProfesorFromJSON(json['profesor']),
        'fechaInscripcion': json['fechaInscripcion'] == null ? undefined : (new Date(json['fechaInscripcion'])),
        'numeroProfesores': json['numeroProfesores'] == null ? undefined : json['numeroProfesores'],
        'numeroAlumnos': json['numeroAlumnos'] == null ? undefined : json['numeroAlumnos'],
    };
}

export function DTOClaseInscritaToJSON(json: any): DTOClaseInscrita {
    return DTOClaseInscritaToJSONTyped(json, false);
}

export function DTOClaseInscritaToJSONTyped(value?: DTOClaseInscrita | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'titulo': value['titulo'],
        'descripcion': value['descripcion'],
        'precio': value['precio'],
        'presencialidad': value['presencialidad'],
        'imagenPortada': value['imagenPortada'],
        'nivel': value['nivel'],
        'alumnosId': value['alumnosId'],
        'profesoresId': value['profesoresId'],
        'ejerciciosId': value['ejerciciosId'],
        'material': value['material'] == null ? undefined : ((value['material'] as Array<any>).map(DTOMaterialToJSON)),
        'tipoClase': value['tipoClase'],
        'profesor': DTOProfesorToJSON(value['profesor']),
        'fechaInscripcion': value['fechaInscripcion'] == null ? undefined : ((value['fechaInscripcion']).toISOString()),
        'numeroProfesores': value['numeroProfesores'],
        'numeroAlumnos': value['numeroAlumnos'],
    };
}

