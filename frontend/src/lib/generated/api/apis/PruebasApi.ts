/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gestión de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

/**
 *
 */
export class PruebasApi extends runtime.BaseAPI {
	/**
	 * Endpoint de prueba que requiere rol de administrador
	 * Endpoint de administrador
	 */
	async adminRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<string>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/test/admin`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		if (this.isJsonMime(response.headers.get('content-type'))) {
			return new runtime.JSONApiResponse<string>(response);
		} else {
			return new runtime.TextApiResponse(response) as any;
		}
	}

	/**
	 * Endpoint de prueba que requiere rol de administrador
	 * Endpoint de administrador
	 */
	async admin(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
		const response = await this.adminRaw(initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene información detallada del usuario autenticado
	 * Información del usuario
	 */
	async obtenerInfoUsuarioRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<string>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/test/user-info`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		if (this.isJsonMime(response.headers.get('content-type'))) {
			return new runtime.JSONApiResponse<string>(response);
		} else {
			return new runtime.TextApiResponse(response) as any;
		}
	}

	/**
	 * Obtiene información detallada del usuario autenticado
	 * Información del usuario
	 */
	async obtenerInfoUsuario(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<string> {
		const response = await this.obtenerInfoUsuarioRaw(initOverrides);
		return await response.value();
	}

	/**
	 * Endpoint de prueba que no requiere autenticación
	 * Endpoint público
	 */
	async publicoRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<string>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/test/public`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		if (this.isJsonMime(response.headers.get('content-type'))) {
			return new runtime.JSONApiResponse<string>(response);
		} else {
			return new runtime.TextApiResponse(response) as any;
		}
	}

	/**
	 * Endpoint de prueba que no requiere autenticación
	 * Endpoint público
	 */
	async publico(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
		const response = await this.publicoRaw(initOverrides);
		return await response.value();
	}

	/**
	 * Endpoint de prueba que requiere autenticación de usuario
	 * Endpoint protegido
	 */
	async usuarioRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<string>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/test/protected`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		if (this.isJsonMime(response.headers.get('content-type'))) {
			return new runtime.JSONApiResponse<string>(response);
		} else {
			return new runtime.TextApiResponse(response) as any;
		}
	}

	/**
	 * Endpoint de prueba que requiere autenticación de usuario
	 * Endpoint protegido
	 */
	async usuario(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
		const response = await this.usuarioRaw(initOverrides);
		return await response.value();
	}
}
