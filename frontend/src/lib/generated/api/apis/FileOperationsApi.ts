/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileInfo,
} from '../models/index';
import {
    FileInfoFromJSON,
    FileInfoToJSON,
} from '../models/index';

export interface DownloadFileRequest {
    path: string;
    deliveryId: number;
}

export interface GetFileInfoRequest {
    deliveryId: number;
}

export interface ViewFileRequest {
    path: string;
    deliveryId: number;
}

/**
 * 
 */
export class FileOperationsApi extends runtime.BaseAPI {

    /**
     * Serves a file for download. Works with all file types.
     * Download file from delivery
     */
    async downloadFileRaw(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling downloadFile().'
            );
        }

        if (requestParameters['deliveryId'] == null) {
            throw new runtime.RequiredError(
                'deliveryId',
                'Required parameter "deliveryId" was null or undefined when calling downloadFile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        if (requestParameters['deliveryId'] != null) {
            queryParameters['deliveryId'] = requestParameters['deliveryId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/files/download`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Serves a file for download. Works with all file types.
     * Download file from delivery
     */
    async downloadFile(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns information about all files in a delivery including file types and sizes.
     * Get file information for a delivery
     */
    async getFileInfoRaw(requestParameters: GetFileInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FileInfo>>> {
        if (requestParameters['deliveryId'] == null) {
            throw new runtime.RequiredError(
                'deliveryId',
                'Required parameter "deliveryId" was null or undefined when calling getFileInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/files/info/{deliveryId}`;
        urlPath = urlPath.replace(`{${"deliveryId"}}`, encodeURIComponent(String(requestParameters['deliveryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FileInfoFromJSON));
    }

    /**
     * Returns information about all files in a delivery including file types and sizes.
     * Get file information for a delivery
     */
    async getFileInfo(requestParameters: GetFileInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FileInfo>> {
        const response = await this.getFileInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Serves a file for inline viewing in the browser. Supports PNG images and PDF documents.
     * View file from delivery
     */
    async viewFileRaw(requestParameters: ViewFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling viewFile().'
            );
        }

        if (requestParameters['deliveryId'] == null) {
            throw new runtime.RequiredError(
                'deliveryId',
                'Required parameter "deliveryId" was null or undefined when calling viewFile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        if (requestParameters['deliveryId'] != null) {
            queryParameters['deliveryId'] = requestParameters['deliveryId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/files/view`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Serves a file for inline viewing in the browser. Supports PNG images and PDF documents.
     * View file from delivery
     */
    async viewFile(requestParameters: ViewFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.viewFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
