/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { DTOPeticionRegistroProfesor, DTOProfesor } from '../models/index';
import {
	DTOPeticionRegistroProfesorFromJSON,
	DTOPeticionRegistroProfesorToJSON,
	DTOProfesorFromJSON,
	DTOProfesorToJSON
} from '../models/index';

export interface AsignarClaseRequest {
	id: number;
	claseId: string;
}

export interface BorrarProfesorPorIdRequest {
	id: number;
}

export interface BuscarProfesoresPorApellidosRequest {
	apellidos: string;
}

export interface BuscarProfesoresPorNombreRequest {
	nombre: string;
}

export interface CambiarEstadoProfesorRequest {
	id: number;
	requestBody: { [key: string]: boolean };
}

export interface ContarClasesProfesorRequest {
	id: number;
}

export interface CrearProfesorRequest {
	dTOPeticionRegistroProfesor: DTOPeticionRegistroProfesor;
}

export interface ObtenerProfesorPorDniRequest {
	dni: string;
}

export interface ObtenerProfesorPorEmailRequest {
	email: string;
}

export interface ObtenerProfesorPorIdRequest {
	id: number;
}

export interface ObtenerProfesorPorUsuarioRequest {
	usuario: string;
}

export interface ObtenerProfesoresRequest {
	nombre?: string;
	apellidos?: string;
	email?: string;
	habilitado?: boolean;
}

export interface ObtenerProfesoresPorClaseRequest {
	claseId: string;
}

export interface RemoverClaseRequest {
	id: number;
	claseId: string;
}

/**
 *
 */
export class ProfesorRestApi extends runtime.BaseAPI {
	/**
	 */
	async asignarClaseRaw(
		requestParameters: AsignarClaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOProfesor>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling asignarClase().'
			);
		}

		if (requestParameters['claseId'] == null) {
			throw new runtime.RequiredError(
				'claseId',
				'Required parameter "claseId" was null or undefined when calling asignarClase().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/{id}/clases/{claseId}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));
		urlPath = urlPath.replace(
			`{${'claseId'}}`,
			encodeURIComponent(String(requestParameters['claseId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorFromJSON(jsonValue));
	}

	/**
	 */
	async asignarClase(
		requestParameters: AsignarClaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOProfesor> {
		const response = await this.asignarClaseRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async borrarProfesorPorIdRaw(
		requestParameters: BorrarProfesorPorIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<{ [key: string]: any }>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling borrarProfesorPorId().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/{id}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse<any>(response);
	}

	/**
	 */
	async borrarProfesorPorId(
		requestParameters: BorrarProfesorPorIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<{ [key: string]: any }> {
		const response = await this.borrarProfesorPorIdRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async buscarProfesoresPorApellidosRaw(
		requestParameters: BuscarProfesoresPorApellidosRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOProfesor>>> {
		if (requestParameters['apellidos'] == null) {
			throw new runtime.RequiredError(
				'apellidos',
				'Required parameter "apellidos" was null or undefined when calling buscarProfesoresPorApellidos().'
			);
		}

		const queryParameters: any = {};

		if (requestParameters['apellidos'] != null) {
			queryParameters['apellidos'] = requestParameters['apellidos'];
		}

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/buscar/apellidos`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOProfesorFromJSON));
	}

	/**
	 */
	async buscarProfesoresPorApellidos(
		requestParameters: BuscarProfesoresPorApellidosRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOProfesor>> {
		const response = await this.buscarProfesoresPorApellidosRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async buscarProfesoresPorNombreRaw(
		requestParameters: BuscarProfesoresPorNombreRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOProfesor>>> {
		if (requestParameters['nombre'] == null) {
			throw new runtime.RequiredError(
				'nombre',
				'Required parameter "nombre" was null or undefined when calling buscarProfesoresPorNombre().'
			);
		}

		const queryParameters: any = {};

		if (requestParameters['nombre'] != null) {
			queryParameters['nombre'] = requestParameters['nombre'];
		}

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/buscar/nombre`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOProfesorFromJSON));
	}

	/**
	 */
	async buscarProfesoresPorNombre(
		requestParameters: BuscarProfesoresPorNombreRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOProfesor>> {
		const response = await this.buscarProfesoresPorNombreRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async cambiarEstadoProfesorRaw(
		requestParameters: CambiarEstadoProfesorRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOProfesor>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling cambiarEstadoProfesor().'
			);
		}

		if (requestParameters['requestBody'] == null) {
			throw new runtime.RequiredError(
				'requestBody',
				'Required parameter "requestBody" was null or undefined when calling cambiarEstadoProfesor().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/api/profesores/{id}/estado`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters['requestBody']
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorFromJSON(jsonValue));
	}

	/**
	 */
	async cambiarEstadoProfesor(
		requestParameters: CambiarEstadoProfesorRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOProfesor> {
		const response = await this.cambiarEstadoProfesorRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async contarClasesProfesorRaw(
		requestParameters: ContarClasesProfesorRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<{ [key: string]: any }>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling contarClasesProfesor().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/{id}/clases/count`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse<any>(response);
	}

	/**
	 */
	async contarClasesProfesor(
		requestParameters: ContarClasesProfesorRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<{ [key: string]: any }> {
		const response = await this.contarClasesProfesorRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async crearProfesorRaw(
		requestParameters: CrearProfesorRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOProfesor>> {
		if (requestParameters['dTOPeticionRegistroProfesor'] == null) {
			throw new runtime.RequiredError(
				'dTOPeticionRegistroProfesor',
				'Required parameter "dTOPeticionRegistroProfesor" was null or undefined when calling crearProfesor().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/api/profesores`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: DTOPeticionRegistroProfesorToJSON(requestParameters['dTOPeticionRegistroProfesor'])
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorFromJSON(jsonValue));
	}

	/**
	 */
	async crearProfesor(
		requestParameters: CrearProfesorRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOProfesor> {
		const response = await this.crearProfesorRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async obtenerProfesorPorDniRaw(
		requestParameters: ObtenerProfesorPorDniRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOProfesor>> {
		if (requestParameters['dni'] == null) {
			throw new runtime.RequiredError(
				'dni',
				'Required parameter "dni" was null or undefined when calling obtenerProfesorPorDni().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/dni/{dni}`;
		urlPath = urlPath.replace(`{${'dni'}}`, encodeURIComponent(String(requestParameters['dni'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorFromJSON(jsonValue));
	}

	/**
	 */
	async obtenerProfesorPorDni(
		requestParameters: ObtenerProfesorPorDniRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOProfesor> {
		const response = await this.obtenerProfesorPorDniRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async obtenerProfesorPorEmailRaw(
		requestParameters: ObtenerProfesorPorEmailRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOProfesor>> {
		if (requestParameters['email'] == null) {
			throw new runtime.RequiredError(
				'email',
				'Required parameter "email" was null or undefined when calling obtenerProfesorPorEmail().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/email/{email}`;
		urlPath = urlPath.replace(
			`{${'email'}}`,
			encodeURIComponent(String(requestParameters['email']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorFromJSON(jsonValue));
	}

	/**
	 */
	async obtenerProfesorPorEmail(
		requestParameters: ObtenerProfesorPorEmailRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOProfesor> {
		const response = await this.obtenerProfesorPorEmailRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async obtenerProfesorPorIdRaw(
		requestParameters: ObtenerProfesorPorIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOProfesor>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling obtenerProfesorPorId().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/{id}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorFromJSON(jsonValue));
	}

	/**
	 */
	async obtenerProfesorPorId(
		requestParameters: ObtenerProfesorPorIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOProfesor> {
		const response = await this.obtenerProfesorPorIdRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async obtenerProfesorPorUsuarioRaw(
		requestParameters: ObtenerProfesorPorUsuarioRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOProfesor>> {
		if (requestParameters['usuario'] == null) {
			throw new runtime.RequiredError(
				'usuario',
				'Required parameter "usuario" was null or undefined when calling obtenerProfesorPorUsuario().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/usuario/{usuario}`;
		urlPath = urlPath.replace(
			`{${'usuario'}}`,
			encodeURIComponent(String(requestParameters['usuario']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorFromJSON(jsonValue));
	}

	/**
	 */
	async obtenerProfesorPorUsuario(
		requestParameters: ObtenerProfesorPorUsuarioRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOProfesor> {
		const response = await this.obtenerProfesorPorUsuarioRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async obtenerProfesoresRaw(
		requestParameters: ObtenerProfesoresRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOProfesor>>> {
		const queryParameters: any = {};

		if (requestParameters['nombre'] != null) {
			queryParameters['nombre'] = requestParameters['nombre'];
		}

		if (requestParameters['apellidos'] != null) {
			queryParameters['apellidos'] = requestParameters['apellidos'];
		}

		if (requestParameters['email'] != null) {
			queryParameters['email'] = requestParameters['email'];
		}

		if (requestParameters['habilitado'] != null) {
			queryParameters['habilitado'] = requestParameters['habilitado'];
		}

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOProfesorFromJSON));
	}

	/**
	 */
	async obtenerProfesores(
		requestParameters: ObtenerProfesoresRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOProfesor>> {
		const response = await this.obtenerProfesoresRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async obtenerProfesoresHabilitadosRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOProfesor>>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/habilitados`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOProfesorFromJSON));
	}

	/**
	 */
	async obtenerProfesoresHabilitados(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOProfesor>> {
		const response = await this.obtenerProfesoresHabilitadosRaw(initOverrides);
		return await response.value();
	}

	/**
	 */
	async obtenerProfesoresPorClaseRaw(
		requestParameters: ObtenerProfesoresPorClaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOProfesor>>> {
		if (requestParameters['claseId'] == null) {
			throw new runtime.RequiredError(
				'claseId',
				'Required parameter "claseId" was null or undefined when calling obtenerProfesoresPorClase().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/clase/{claseId}`;
		urlPath = urlPath.replace(
			`{${'claseId'}}`,
			encodeURIComponent(String(requestParameters['claseId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOProfesorFromJSON));
	}

	/**
	 */
	async obtenerProfesoresPorClase(
		requestParameters: ObtenerProfesoresPorClaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOProfesor>> {
		const response = await this.obtenerProfesoresPorClaseRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async obtenerProfesoresSinClasesRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOProfesor>>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/sin-clases`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOProfesorFromJSON));
	}

	/**
	 */
	async obtenerProfesoresSinClases(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOProfesor>> {
		const response = await this.obtenerProfesoresSinClasesRaw(initOverrides);
		return await response.value();
	}

	/**
	 */
	async removerClaseRaw(
		requestParameters: RemoverClaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOProfesor>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling removerClase().'
			);
		}

		if (requestParameters['claseId'] == null) {
			throw new runtime.RequiredError(
				'claseId',
				'Required parameter "claseId" was null or undefined when calling removerClase().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/{id}/clases/{claseId}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));
		urlPath = urlPath.replace(
			`{${'claseId'}}`,
			encodeURIComponent(String(requestParameters['claseId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorFromJSON(jsonValue));
	}

	/**
	 */
	async removerClase(
		requestParameters: RemoverClaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOProfesor> {
		const response = await this.removerClaseRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async testRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<string>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/profesores/test`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		if (this.isJsonMime(response.headers.get('content-type'))) {
			return new runtime.JSONApiResponse<string>(response);
		} else {
			return new runtime.TextApiResponse(response) as any;
		}
	}

	/**
	 */
	async test(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
		const response = await this.testRaw(initOverrides);
		return await response.value();
	}
}
