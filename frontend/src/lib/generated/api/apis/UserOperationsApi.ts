/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DTOAlumnoPublico,
  DTOClase,
  DTOClaseInscrita,
  DTORespuestaAlumnosClase,
} from '../models/index';
import {
    DTOAlumnoPublicoFromJSON,
    DTOAlumnoPublicoToJSON,
    DTOClaseFromJSON,
    DTOClaseToJSON,
    DTOClaseInscritaFromJSON,
    DTOClaseInscritaToJSON,
    DTORespuestaAlumnosClaseFromJSON,
    DTORespuestaAlumnosClaseToJSON,
} from '../models/index';

export interface ObtenerAlumnosDeClaseRequest {
    claseId: number;
    page?: number;
    size?: number;
    sortBy?: string;
    sortDirection?: string;
}

export interface ObtenerAlumnosPublicosDeClaseRequest {
    claseId: number;
}

/**
 * 
 */
export class UserOperationsApi extends runtime.BaseAPI {

    /**
     * Gets the list of students enrolled in a specific class. The level of detail of the information depends on the user\'s role: - ADMIN: complete information of all students - PROFESOR: complete information if they are the professor of the class, public information if not - ALUMNO: only public information of the students
     * Get students in a class
     */
    async obtenerAlumnosDeClaseRaw(requestParameters: ObtenerAlumnosDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaAlumnosClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling obtenerAlumnosDeClase().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDirection'] != null) {
            queryParameters['sortDirection'] = requestParameters['sortDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/my/classes/{claseId}/students`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaAlumnosClaseFromJSON(jsonValue));
    }

    /**
     * Gets the list of students enrolled in a specific class. The level of detail of the information depends on the user\'s role: - ADMIN: complete information of all students - PROFESOR: complete information if they are the professor of the class, public information if not - ALUMNO: only public information of the students
     * Get students in a class
     */
    async obtenerAlumnosDeClase(requestParameters: ObtenerAlumnosDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaAlumnosClase> {
        const response = await this.obtenerAlumnosDeClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of students enrolled in a class with only public information (first name and last name). This endpoint always returns public information regardless of the user\'s role.
     * Get public information of students in a class
     */
    async obtenerAlumnosPublicosDeClaseRaw(requestParameters: ObtenerAlumnosPublicosDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOAlumnoPublico<any>>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling obtenerAlumnosPublicosDeClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/my/classes/{claseId}/students/public`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets the list of students enrolled in a class with only public information (first name and last name). This endpoint always returns public information regardless of the user\'s role.
     * Get public information of students in a class
     */
    async obtenerAlumnosPublicosDeClase(requestParameters: ObtenerAlumnosPublicosDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOAlumnoPublico<any>> {
        const response = await this.obtenerAlumnosPublicosDeClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the classes of the authenticated professor
     * Get my classes
     */
    async obtenerMisClasesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase<any>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/my/classes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets the classes of the authenticated professor
     * Get my classes
     */
    async obtenerMisClases(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase<any>> {
        const response = await this.obtenerMisClasesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets the classes in which the authenticated student is enrolled
     * Get my enrolled classes
     */
    async obtenerMisClasesInscritasRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClaseInscrita<any>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/my/enrollments`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets the classes in which the authenticated student is enrolled
     * Get my enrolled classes
     */
    async obtenerMisClasesInscritas(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClaseInscrita<any>> {
        const response = await this.obtenerMisClasesInscritasRaw(initOverrides);
        return await response.value();
    }

}
