/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DTOClase,
  DTOCurso,
  DTOPeticionCrearCurso,
  DTOPeticionCrearTaller,
  DTORespuestaPaginada,
  DTORespuestaPaginadaDTOClase,
  DTOTaller,
} from '../models/index';
import {
    DTOClaseFromJSON,
    DTOClaseToJSON,
    DTOCursoFromJSON,
    DTOCursoToJSON,
    DTOPeticionCrearCursoFromJSON,
    DTOPeticionCrearCursoToJSON,
    DTOPeticionCrearTallerFromJSON,
    DTOPeticionCrearTallerToJSON,
    DTORespuestaPaginadaFromJSON,
    DTORespuestaPaginadaToJSON,
    DTORespuestaPaginadaDTOClaseFromJSON,
    DTORespuestaPaginadaDTOClaseToJSON,
    DTOTallerFromJSON,
    DTOTallerToJSON,
} from '../models/index';

export interface CrearCursoRequest {
    dTOPeticionCrearCurso: DTOPeticionCrearCurso;
}

export interface CrearTallerRequest {
    dTOPeticionCrearTaller: DTOPeticionCrearTaller;
}

export interface EliminarClaseRequest {
    id: number;
}

export interface ObtenerClaseConDetallesRequest {
    id: number;
}

export interface ObtenerClasePorIdRequest {
    id: number;
}

export interface ObtenerClasesRequest {
    q?: string;
    titulo?: string;
    descripcion?: string;
    dificultad?: ObtenerClasesDificultadEnum;
    presencialidad?: ObtenerClasesPresencialidadEnum;
    profesorId?: string;
    cursoId?: string;
    tallerId?: string;
    page?: number;
    size?: number;
    sortBy?: string;
    sortDirection?: string;
}

export interface ObtenerClasesDisponiblesRequest {
    q?: string;
    titulo?: string;
    descripcion?: string;
    dificultad?: ObtenerClasesDisponiblesDificultadEnum;
    presencialidad?: ObtenerClasesDisponiblesPresencialidadEnum;
    precioMinimo?: number;
    precioMaximo?: number;
    page?: number;
    size?: number;
    sortBy?: string;
    sortDirection?: string;
}

/**
 * 
 */
export class ClassesApi extends runtime.BaseAPI {

    /**
     * Creates a new course in the system (requires ADMIN or PROFESOR role)
     * Create new course
     */
    async crearCursoRaw(requestParameters: CrearCursoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOCurso>> {
        if (requestParameters['dTOPeticionCrearCurso'] == null) {
            throw new runtime.RequiredError(
                'dTOPeticionCrearCurso',
                'Required parameter "dTOPeticionCrearCurso" was null or undefined when calling crearCurso().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/clases/cursos`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DTOPeticionCrearCursoToJSON(requestParameters['dTOPeticionCrearCurso']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOCursoFromJSON(jsonValue));
    }

    /**
     * Creates a new course in the system (requires ADMIN or PROFESOR role)
     * Create new course
     */
    async crearCurso(requestParameters: CrearCursoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOCurso> {
        const response = await this.crearCursoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new workshop in the system (requires ADMIN or PROFESOR role)
     * Create new workshop
     */
    async crearTallerRaw(requestParameters: CrearTallerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOTaller>> {
        if (requestParameters['dTOPeticionCrearTaller'] == null) {
            throw new runtime.RequiredError(
                'dTOPeticionCrearTaller',
                'Required parameter "dTOPeticionCrearTaller" was null or undefined when calling crearTaller().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/clases/talleres`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DTOPeticionCrearTallerToJSON(requestParameters['dTOPeticionCrearTaller']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOTallerFromJSON(jsonValue));
    }

    /**
     * Creates a new workshop in the system (requires ADMIN or PROFESOR role)
     * Create new workshop
     */
    async crearTaller(requestParameters: CrearTallerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOTaller> {
        const response = await this.crearTallerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a class from the system (requires ADMIN role)
     * Delete class
     */
    async eliminarClaseRaw(requestParameters: EliminarClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eliminarClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a class from the system (requires ADMIN role)
     * Delete class
     */
    async eliminarClase(requestParameters: EliminarClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eliminarClaseRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a class with all its relationships loaded using Entity Graph for optimal performance
     * Get class with all details
     */
    async obtenerClaseConDetallesRaw(requestParameters: ObtenerClaseConDetallesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerClaseConDetalles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{id}/detalles`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     * Gets a class with all its relationships loaded using Entity Graph for optimal performance
     * Get class with all details
     */
    async obtenerClaseConDetalles(requestParameters: ObtenerClaseConDetallesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.obtenerClaseConDetallesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a specific class by its ID
     * Get class by ID
     */
    async obtenerClasePorIdRaw(requestParameters: ObtenerClasePorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerClasePorId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     * Gets a specific class by its ID
     * Get class by ID
     */
    async obtenerClasePorId(requestParameters: ObtenerClasePorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.obtenerClasePorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a paginated list of classes filtered according to the user\'s role
     * Get paginated classes
     */
    async obtenerClasesRaw(requestParameters: ObtenerClasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaPaginada>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['titulo'] != null) {
            queryParameters['titulo'] = requestParameters['titulo'];
        }

        if (requestParameters['descripcion'] != null) {
            queryParameters['descripcion'] = requestParameters['descripcion'];
        }

        if (requestParameters['dificultad'] != null) {
            queryParameters['dificultad'] = requestParameters['dificultad'];
        }

        if (requestParameters['presencialidad'] != null) {
            queryParameters['presencialidad'] = requestParameters['presencialidad'];
        }

        if (requestParameters['profesorId'] != null) {
            queryParameters['profesorId'] = requestParameters['profesorId'];
        }

        if (requestParameters['cursoId'] != null) {
            queryParameters['cursoId'] = requestParameters['cursoId'];
        }

        if (requestParameters['tallerId'] != null) {
            queryParameters['tallerId'] = requestParameters['tallerId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDirection'] != null) {
            queryParameters['sortDirection'] = requestParameters['sortDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaPaginadaFromJSON(jsonValue));
    }

    /**
     * Gets a paginated list of classes filtered according to the user\'s role
     * Get paginated classes
     */
    async obtenerClases(requestParameters: ObtenerClasesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaPaginada> {
        const response = await this.obtenerClasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a paginated list of classes excluding those where the student is already enrolled
     * Get available classes for enrollment
     */
    async obtenerClasesDisponiblesRaw(requestParameters: ObtenerClasesDisponiblesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaPaginada>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['titulo'] != null) {
            queryParameters['titulo'] = requestParameters['titulo'];
        }

        if (requestParameters['descripcion'] != null) {
            queryParameters['descripcion'] = requestParameters['descripcion'];
        }

        if (requestParameters['dificultad'] != null) {
            queryParameters['dificultad'] = requestParameters['dificultad'];
        }

        if (requestParameters['presencialidad'] != null) {
            queryParameters['presencialidad'] = requestParameters['presencialidad'];
        }

        if (requestParameters['precioMinimo'] != null) {
            queryParameters['precioMinimo'] = requestParameters['precioMinimo'];
        }

        if (requestParameters['precioMaximo'] != null) {
            queryParameters['precioMaximo'] = requestParameters['precioMaximo'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDirection'] != null) {
            queryParameters['sortDirection'] = requestParameters['sortDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/disponibles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaPaginadaFromJSON(jsonValue));
    }

    /**
     * Gets a paginated list of classes excluding those where the student is already enrolled
     * Get available classes for enrollment
     */
    async obtenerClasesDisponibles(requestParameters: ObtenerClasesDisponiblesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaPaginada> {
        const response = await this.obtenerClasesDisponiblesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets classes optimized for dashboard display with students and teachers loaded using Entity Graph
     * Get classes for dashboard
     */
    async obtenerClasesParaDashboardRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/dashboard`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     * Gets classes optimized for dashboard display with students and teachers loaded using Entity Graph
     * Get classes for dashboard
     */
    async obtenerClasesParaDashboard(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.obtenerClasesParaDashboardRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets classes optimized for exercise management with exercises loaded using Entity Graph
     * Get classes for exercise management
     */
    async obtenerClasesParaGestionEjerciciosRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/ejercicios`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     * Gets classes optimized for exercise management with exercises loaded using Entity Graph
     * Get classes for exercise management
     */
    async obtenerClasesParaGestionEjercicios(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.obtenerClasesParaGestionEjerciciosRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ObtenerClasesDificultadEnum = {
    Principiante: 'PRINCIPIANTE',
    Intermedio: 'INTERMEDIO',
    Avanzado: 'AVANZADO'
} as const;
export type ObtenerClasesDificultadEnum = typeof ObtenerClasesDificultadEnum[keyof typeof ObtenerClasesDificultadEnum];
/**
 * @export
 */
export const ObtenerClasesPresencialidadEnum = {
    Online: 'ONLINE',
    Presencial: 'PRESENCIAL',
    Hibrido: 'HIBRIDO'
} as const;
export type ObtenerClasesPresencialidadEnum = typeof ObtenerClasesPresencialidadEnum[keyof typeof ObtenerClasesPresencialidadEnum];
/**
 * @export
 */
export const ObtenerClasesDisponiblesDificultadEnum = {
    Principiante: 'PRINCIPIANTE',
    Intermedio: 'INTERMEDIO',
    Avanzado: 'AVANZADO'
} as const;
export type ObtenerClasesDisponiblesDificultadEnum = typeof ObtenerClasesDisponiblesDificultadEnum[keyof typeof ObtenerClasesDisponiblesDificultadEnum];
/**
 * @export
 */
export const ObtenerClasesDisponiblesPresencialidadEnum = {
    Online: 'ONLINE',
    Presencial: 'PRESENCIAL',
    Hibrido: 'HIBRIDO'
} as const;
export type ObtenerClasesDisponiblesPresencialidadEnum = typeof ObtenerClasesDisponiblesPresencialidadEnum[keyof typeof ObtenerClasesDisponiblesPresencialidadEnum];
