/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DTOMaterial,
  DTORespuestaPaginada,
  DTORespuestaPaginadaDTOMaterial,
} from '../models/index';
import {
    DTOMaterialFromJSON,
    DTOMaterialToJSON,
    DTORespuestaPaginadaFromJSON,
    DTORespuestaPaginadaToJSON,
    DTORespuestaPaginadaDTOMaterialFromJSON,
    DTORespuestaPaginadaDTOMaterialToJSON,
} from '../models/index';

export interface ActualizarMaterialRequest {
    id: number;
    name: string;
    url: string;
}

export interface CrearMaterialRequest {
    name: string;
    url: string;
}

export interface EliminarMaterialRequest {
    id: number;
}

export interface ObtenerMaterialPorIdRequest {
    id: number;
}

export interface ObtenerMaterialesRequest {
    q?: string;
    name?: string;
    url?: string;
    type?: string;
    page?: number;
    size?: number;
    sortBy?: string;
    sortDirection?: string;
}

/**
 * 
 */
export class MaterialsApi extends runtime.BaseAPI {

    /**
     * Updates an existing material (requires ADMIN or PROFESOR role)
     * Update material
     */
    async actualizarMaterialRaw(requestParameters: ActualizarMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOMaterial>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling actualizarMaterial().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling actualizarMaterial().'
            );
        }

        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling actualizarMaterial().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/material/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOMaterialFromJSON(jsonValue));
    }

    /**
     * Updates an existing material (requires ADMIN or PROFESOR role)
     * Update material
     */
    async actualizarMaterial(requestParameters: ActualizarMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOMaterial> {
        const response = await this.actualizarMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new material in the system (requires ADMIN or PROFESOR role)
     * Create new material
     */
    async crearMaterialRaw(requestParameters: CrearMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOMaterial>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling crearMaterial().'
            );
        }

        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling crearMaterial().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/material`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOMaterialFromJSON(jsonValue));
    }

    /**
     * Creates a new material in the system (requires ADMIN or PROFESOR role)
     * Create new material
     */
    async crearMaterial(requestParameters: CrearMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOMaterial> {
        const response = await this.crearMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a material from the system (requires ADMIN or PROFESOR role)
     * Delete material
     */
    async eliminarMaterialRaw(requestParameters: EliminarMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eliminarMaterial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/material/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a material from the system (requires ADMIN or PROFESOR role)
     * Delete material
     */
    async eliminarMaterial(requestParameters: EliminarMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eliminarMaterialRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a specific material by its ID
     * Get material by ID
     */
    async obtenerMaterialPorIdRaw(requestParameters: ObtenerMaterialPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOMaterial>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerMaterialPorId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/material/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOMaterialFromJSON(jsonValue));
    }

    /**
     * Gets a specific material by its ID
     * Get material by ID
     */
    async obtenerMaterialPorId(requestParameters: ObtenerMaterialPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOMaterial> {
        const response = await this.obtenerMaterialPorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a paginated list of materials with optional filters
     * Get paginated materials
     */
    async obtenerMaterialesRaw(requestParameters: ObtenerMaterialesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaPaginada>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDirection'] != null) {
            queryParameters['sortDirection'] = requestParameters['sortDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/material`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaPaginadaFromJSON(jsonValue));
    }

    /**
     * Gets a paginated list of materials with optional filters
     * Get paginated materials
     */
    async obtenerMateriales(requestParameters: ObtenerMaterialesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaPaginada> {
        const response = await this.obtenerMaterialesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
