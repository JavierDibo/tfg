/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DTOPeticionLogin,
  DTOPeticionRegistro,
  DTORespuestaLogin,
} from '../models/index';
import {
    DTOPeticionLoginFromJSON,
    DTOPeticionLoginToJSON,
    DTOPeticionRegistroFromJSON,
    DTOPeticionRegistroToJSON,
    DTORespuestaLoginFromJSON,
    DTORespuestaLoginToJSON,
} from '../models/index';

export interface LoginRequest {
    dTOPeticionLogin: DTOPeticionLogin;
}

export interface RegistroRequest {
    dTOPeticionRegistro: DTOPeticionRegistro;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Authenticates a user with their credentials and returns a JWT token
     * Login
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaLogin>> {
        if (requestParameters['dTOPeticionLogin'] == null) {
            throw new runtime.RequiredError(
                'dTOPeticionLogin',
                'Required parameter "dTOPeticionLogin" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DTOPeticionLoginToJSON(requestParameters['dTOPeticionLogin']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaLoginFromJSON(jsonValue));
    }

    /**
     * Authenticates a user with their credentials and returns a JWT token
     * Login
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaLogin> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new user account and returns a JWT token
     * Register new user
     */
    async registroRaw(requestParameters: RegistroRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaLogin>> {
        if (requestParameters['dTOPeticionRegistro'] == null) {
            throw new runtime.RequiredError(
                'dTOPeticionRegistro',
                'Required parameter "dTOPeticionRegistro" was null or undefined when calling registro().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/registro`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DTOPeticionRegistroToJSON(requestParameters['dTOPeticionRegistro']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaLoginFromJSON(jsonValue));
    }

    /**
     * Creates a new user account and returns a JWT token
     * Register new user
     */
    async registro(requestParameters: RegistroRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaLogin> {
        const response = await this.registroRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test endpoint to verify that authentication is working correctly
     * Test authentication
     */
    async testRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auth/test`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Test endpoint to verify that authentication is working correctly
     * Test authentication
     */
    async test(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.testRaw(initOverrides);
        return await response.value();
    }

}
