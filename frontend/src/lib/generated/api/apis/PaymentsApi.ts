/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DTOPago,
  DTOPeticionCrearPago,
  DTORespuestaPaginada,
  DTORespuestaPaginadaDTOPago,
} from '../models/index';
import {
    DTOPagoFromJSON,
    DTOPagoToJSON,
    DTOPeticionCrearPagoFromJSON,
    DTOPeticionCrearPagoToJSON,
    DTORespuestaPaginadaFromJSON,
    DTORespuestaPaginadaToJSON,
    DTORespuestaPaginadaDTOPagoFromJSON,
    DTORespuestaPaginadaDTOPagoToJSON,
} from '../models/index';

export interface CheckPaymentStatusRequest {
    id: number;
}

export interface CrearPagoRequest {
    dTOPeticionCrearPago: DTOPeticionCrearPago;
}

export interface GetMyRecentPaymentsRequest {
    limit?: number;
}

export interface GetRecentPaymentsRequest {
    limit?: number;
}

export interface ObtenerPagoPorIdRequest {
    id: number;
}

export interface ObtenerPagosRequest {
    page?: number;
    size?: number;
    sortBy?: string;
    sortDirection?: string;
}

export interface ObtenerPagosPorAlumnoRequest {
    alumnoId: string;
    page?: number;
    size?: number;
    sortBy?: string;
    sortDirection?: string;
}

export interface ProcesarWebhookStripeRequest {
    stripeSignature: string;
    body: string;
    stripeEventId?: string;
}

/**
 * 
 */
export class PaymentsApi extends runtime.BaseAPI {

    /**
     * Checks if a payment was successful (demo utility). Students can only check their own payments.
     * Check payment status
     */
    async checkPaymentStatusRaw(requestParameters: CheckPaymentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling checkPaymentStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/pagos/{id}/status`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Checks if a payment was successful (demo utility). Students can only check their own payments.
     * Check payment status
     */
    async checkPaymentStatus(requestParameters: CheckPaymentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.checkPaymentStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new payment with Stripe integration. Returns client_secret for frontend confirmation. Students can only create payments for themselves.
     * Create payment
     */
    async crearPagoRaw(requestParameters: CrearPagoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOPago>> {
        if (requestParameters['dTOPeticionCrearPago'] == null) {
            throw new runtime.RequiredError(
                'dTOPeticionCrearPago',
                'Required parameter "dTOPeticionCrearPago" was null or undefined when calling crearPago().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/pagos`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DTOPeticionCrearPagoToJSON(requestParameters['dTOPeticionCrearPago']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOPagoFromJSON(jsonValue));
    }

    /**
     * Creates a new payment with Stripe integration. Returns client_secret for frontend confirmation. Students can only create payments for themselves.
     * Create payment
     */
    async crearPago(requestParameters: CrearPagoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOPago> {
        const response = await this.crearPagoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets recent payments for the authenticated student. Students can only see their own payments.
     * Get my recent payments
     */
    async getMyRecentPaymentsRaw(requestParameters: GetMyRecentPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOPago<any>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/pagos/my-recent`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets recent payments for the authenticated student. Students can only see their own payments.
     * Get my recent payments
     */
    async getMyRecentPayments(requestParameters: GetMyRecentPaymentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOPago<any>> {
        const response = await this.getMyRecentPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets recent payments for demo purposes. Only ADMIN and PROFESOR can access.
     * Get recent payments
     */
    async getRecentPaymentsRaw(requestParameters: GetRecentPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOPago<any>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/pagos/recent`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets recent payments for demo purposes. Only ADMIN and PROFESOR can access.
     * Get recent payments
     */
    async getRecentPayments(requestParameters: GetRecentPaymentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOPago<any>> {
        const response = await this.getRecentPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a specific payment by ID. Students can only access their own payments.
     * Get specific payment
     */
    async obtenerPagoPorIdRaw(requestParameters: ObtenerPagoPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOPago>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerPagoPorId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/pagos/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOPagoFromJSON(jsonValue));
    }

    /**
     * Gets a specific payment by ID. Students can only access their own payments.
     * Get specific payment
     */
    async obtenerPagoPorId(requestParameters: ObtenerPagoPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOPago> {
        const response = await this.obtenerPagoPorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a paginated list of payments. Only ADMIN and PROFESOR can access payment data.
     * Get paginated payments
     */
    async obtenerPagosRaw(requestParameters: ObtenerPagosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaPaginada>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDirection'] != null) {
            queryParameters['sortDirection'] = requestParameters['sortDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/pagos`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaPaginadaFromJSON(jsonValue));
    }

    /**
     * Gets a paginated list of payments. Only ADMIN and PROFESOR can access payment data.
     * Get paginated payments
     */
    async obtenerPagos(requestParameters: ObtenerPagosRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaPaginada> {
        const response = await this.obtenerPagosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a paginated list of payments for a specific student. Only ADMIN and PROFESOR can access student payment data.
     * Get student payments
     */
    async obtenerPagosPorAlumnoRaw(requestParameters: ObtenerPagosPorAlumnoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaPaginada>> {
        if (requestParameters['alumnoId'] == null) {
            throw new runtime.RequiredError(
                'alumnoId',
                'Required parameter "alumnoId" was null or undefined when calling obtenerPagosPorAlumno().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDirection'] != null) {
            queryParameters['sortDirection'] = requestParameters['sortDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/pagos/alumno/{alumnoId}`;
        urlPath = urlPath.replace(`{${"alumnoId"}}`, encodeURIComponent(String(requestParameters['alumnoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaPaginadaFromJSON(jsonValue));
    }

    /**
     * Gets a paginated list of payments for a specific student. Only ADMIN and PROFESOR can access student payment data.
     * Get student payments
     */
    async obtenerPagosPorAlumno(requestParameters: ObtenerPagosPorAlumnoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaPaginada> {
        const response = await this.obtenerPagosPorAlumnoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Processes Stripe webhook events to update payment status. Called by Stripe automatically.
     * Stripe webhook endpoint
     */
    async procesarWebhookStripeRaw(requestParameters: ProcesarWebhookStripeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['stripeSignature'] == null) {
            throw new runtime.RequiredError(
                'stripeSignature',
                'Required parameter "stripeSignature" was null or undefined when calling procesarWebhookStripe().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling procesarWebhookStripe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['stripeSignature'] != null) {
            headerParameters['Stripe-Signature'] = String(requestParameters['stripeSignature']);
        }

        if (requestParameters['stripeEventId'] != null) {
            headerParameters['Stripe-Event-Id'] = String(requestParameters['stripeEventId']);
        }


        let urlPath = `/api/pagos/stripe/webhook`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Processes Stripe webhook events to update payment status. Called by Stripe automatically.
     * Stripe webhook endpoint
     */
    async procesarWebhookStripe(requestParameters: ProcesarWebhookStripeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.procesarWebhookStripeRaw(requestParameters, initOverrides);
    }

}
