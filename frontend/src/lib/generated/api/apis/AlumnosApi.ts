/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gestión de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
	DTOActualizacionAlumno,
	DTOAlumno,
	DTOClaseInscrita,
	DTOPerfilAlumno,
	DTOPeticionRegistroAlumno,
	DTORespuestaPaginada,
	DTORespuestaPaginadaDTOAlumno
} from '../models/index';
import {
	DTOActualizacionAlumnoFromJSON,
	DTOActualizacionAlumnoToJSON,
	DTOAlumnoFromJSON,
	DTOAlumnoToJSON,
	DTOClaseInscritaFromJSON,
	DTOClaseInscritaToJSON,
	DTOPerfilAlumnoFromJSON,
	DTOPerfilAlumnoToJSON,
	DTOPeticionRegistroAlumnoFromJSON,
	DTOPeticionRegistroAlumnoToJSON,
	DTORespuestaPaginadaFromJSON,
	DTORespuestaPaginadaToJSON,
	DTORespuestaPaginadaDTOAlumnoFromJSON,
	DTORespuestaPaginadaDTOAlumnoToJSON
} from '../models/index';

export interface ActualizarAlumnoRequest {
	id: number;
	dTOActualizacionAlumno: DTOActualizacionAlumno;
}

export interface BorrarAlumnoPorIdRequest {
	id: number;
}

export interface CambiarEstadoMatriculaRequest {
	id: number;
	requestBody: { [key: string]: boolean };
}

export interface CrearAlumnoRequest {
	dTOPeticionRegistroAlumno: DTOPeticionRegistroAlumno;
}

export interface HabilitarDeshabilitarAlumnoRequest {
	id: number;
	requestBody: { [key: string]: boolean };
}

export interface ObtenerAlumnoPorDniRequest {
	dni: string;
}

export interface ObtenerAlumnoPorEmailRequest {
	email: string;
}

export interface ObtenerAlumnoPorIdRequest {
	id: number;
}

export interface ObtenerAlumnoPorUsuarioRequest {
	usuario: string;
}

export interface ObtenerAlumnosRequest {
	q?: string;
	nombre?: string;
	apellidos?: string;
	dni?: string;
	email?: string;
	matriculado?: boolean;
}

export interface ObtenerAlumnosDisponiblesRequest {
	page?: number;
	size?: number;
	sortBy?: string;
	sortDirection?: string;
}

export interface ObtenerAlumnosMatriculadosPaginadosRequest {
	page?: number;
	size?: number;
	sortBy?: string;
	sortDirection?: string;
}

export interface ObtenerAlumnosNoMatriculadosPaginadosRequest {
	page?: number;
	size?: number;
	sortBy?: string;
	sortDirection?: string;
}

export interface ObtenerAlumnosPaginadosRequest {
	q?: string;
	nombre?: string;
	apellidos?: string;
	dni?: string;
	email?: string;
	matriculado?: boolean;
	page?: number;
	size?: number;
	sortBy?: string;
	sortDirection?: string;
}

export interface ObtenerClasesInscritasConDetallesRequest {
	alumnoId: number;
}

/**
 *
 */
export class AlumnosApi extends runtime.BaseAPI {
	/**
	 */
	async actualizarAlumnoRaw(
		requestParameters: ActualizarAlumnoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOAlumno>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling actualizarAlumno().'
			);
		}

		if (requestParameters['dTOActualizacionAlumno'] == null) {
			throw new runtime.RequiredError(
				'dTOActualizacionAlumno',
				'Required parameter "dTOActualizacionAlumno" was null or undefined when calling actualizarAlumno().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/api/alumnos/{id}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'PATCH',
				headers: headerParameters,
				query: queryParameters,
				body: DTOActualizacionAlumnoToJSON(requestParameters['dTOActualizacionAlumno'])
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
	}

	/**
	 */
	async actualizarAlumno(
		requestParameters: ActualizarAlumnoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOAlumno> {
		const response = await this.actualizarAlumnoRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async borrarAlumnoPorIdRaw(
		requestParameters: BorrarAlumnoPorIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOAlumno>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling borrarAlumnoPorId().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/{id}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
	}

	/**
	 */
	async borrarAlumnoPorId(
		requestParameters: BorrarAlumnoPorIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOAlumno> {
		const response = await this.borrarAlumnoPorIdRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async cambiarEstadoMatriculaRaw(
		requestParameters: CambiarEstadoMatriculaRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOAlumno>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling cambiarEstadoMatricula().'
			);
		}

		if (requestParameters['requestBody'] == null) {
			throw new runtime.RequiredError(
				'requestBody',
				'Required parameter "requestBody" was null or undefined when calling cambiarEstadoMatricula().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/api/alumnos/{id}/matricula`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'PATCH',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters['requestBody']
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
	}

	/**
	 */
	async cambiarEstadoMatricula(
		requestParameters: CambiarEstadoMatriculaRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOAlumno> {
		const response = await this.cambiarEstadoMatriculaRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async crearAlumnoRaw(
		requestParameters: CrearAlumnoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOAlumno>> {
		if (requestParameters['dTOPeticionRegistroAlumno'] == null) {
			throw new runtime.RequiredError(
				'dTOPeticionRegistroAlumno',
				'Required parameter "dTOPeticionRegistroAlumno" was null or undefined when calling crearAlumno().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/api/alumnos`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: DTOPeticionRegistroAlumnoToJSON(requestParameters['dTOPeticionRegistroAlumno'])
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
	}

	/**
	 */
	async crearAlumno(
		requestParameters: CrearAlumnoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOAlumno> {
		const response = await this.crearAlumnoRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async habilitarDeshabilitarAlumnoRaw(
		requestParameters: HabilitarDeshabilitarAlumnoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOAlumno>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling habilitarDeshabilitarAlumno().'
			);
		}

		if (requestParameters['requestBody'] == null) {
			throw new runtime.RequiredError(
				'requestBody',
				'Required parameter "requestBody" was null or undefined when calling habilitarDeshabilitarAlumno().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/api/alumnos/{id}/habilitar`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'PATCH',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters['requestBody']
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
	}

	/**
	 */
	async habilitarDeshabilitarAlumno(
		requestParameters: HabilitarDeshabilitarAlumnoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOAlumno> {
		const response = await this.habilitarDeshabilitarAlumnoRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene un alumno específico por su DNI (requiere rol ADMIN)
	 * Obtener alumno por DNI
	 */
	async obtenerAlumnoPorDniRaw(
		requestParameters: ObtenerAlumnoPorDniRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOAlumno>> {
		if (requestParameters['dni'] == null) {
			throw new runtime.RequiredError(
				'dni',
				'Required parameter "dni" was null or undefined when calling obtenerAlumnoPorDni().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/dni/{dni}`;
		urlPath = urlPath.replace(`{${'dni'}}`, encodeURIComponent(String(requestParameters['dni'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
	}

	/**
	 * Obtiene un alumno específico por su DNI (requiere rol ADMIN)
	 * Obtener alumno por DNI
	 */
	async obtenerAlumnoPorDni(
		requestParameters: ObtenerAlumnoPorDniRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOAlumno> {
		const response = await this.obtenerAlumnoPorDniRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene un alumno específico por su email (requiere rol ADMIN)
	 * Obtener alumno por email
	 */
	async obtenerAlumnoPorEmailRaw(
		requestParameters: ObtenerAlumnoPorEmailRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOAlumno>> {
		if (requestParameters['email'] == null) {
			throw new runtime.RequiredError(
				'email',
				'Required parameter "email" was null or undefined when calling obtenerAlumnoPorEmail().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/email/{email}`;
		urlPath = urlPath.replace(
			`{${'email'}}`,
			encodeURIComponent(String(requestParameters['email']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
	}

	/**
	 * Obtiene un alumno específico por su email (requiere rol ADMIN)
	 * Obtener alumno por email
	 */
	async obtenerAlumnoPorEmail(
		requestParameters: ObtenerAlumnoPorEmailRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOAlumno> {
		const response = await this.obtenerAlumnoPorEmailRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene un alumno específico por su ID. Los alumnos solo pueden ver su propio perfil.
	 * Obtener alumno por ID
	 */
	async obtenerAlumnoPorIdRaw(
		requestParameters: ObtenerAlumnoPorIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOAlumno>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling obtenerAlumnoPorId().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/{id}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
	}

	/**
	 * Obtiene un alumno específico por su ID. Los alumnos solo pueden ver su propio perfil.
	 * Obtener alumno por ID
	 */
	async obtenerAlumnoPorId(
		requestParameters: ObtenerAlumnoPorIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOAlumno> {
		const response = await this.obtenerAlumnoPorIdRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene un alumno específico por su nombre de usuario. Los alumnos solo pueden ver su propio perfil.
	 * Obtener alumno por usuario
	 */
	async obtenerAlumnoPorUsuarioRaw(
		requestParameters: ObtenerAlumnoPorUsuarioRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOAlumno>> {
		if (requestParameters['usuario'] == null) {
			throw new runtime.RequiredError(
				'usuario',
				'Required parameter "usuario" was null or undefined when calling obtenerAlumnoPorUsuario().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/usuario/{usuario}`;
		urlPath = urlPath.replace(
			`{${'usuario'}}`,
			encodeURIComponent(String(requestParameters['usuario']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
	}

	/**
	 * Obtiene un alumno específico por su nombre de usuario. Los alumnos solo pueden ver su propio perfil.
	 * Obtener alumno por usuario
	 */
	async obtenerAlumnoPorUsuario(
		requestParameters: ObtenerAlumnoPorUsuarioRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOAlumno> {
		const response = await this.obtenerAlumnoPorUsuarioRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene una lista de alumnos con filtros opcionales sin paginación (DEPRECATED - usar /paged)
	 * Obtener alumnos (DEPRECATED)
	 * @deprecated
	 */
	async obtenerAlumnosRaw(
		requestParameters: ObtenerAlumnosRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOAlumno>> {
		const queryParameters: any = {};

		if (requestParameters['q'] != null) {
			queryParameters['q'] = requestParameters['q'];
		}

		if (requestParameters['nombre'] != null) {
			queryParameters['nombre'] = requestParameters['nombre'];
		}

		if (requestParameters['apellidos'] != null) {
			queryParameters['apellidos'] = requestParameters['apellidos'];
		}

		if (requestParameters['dni'] != null) {
			queryParameters['dni'] = requestParameters['dni'];
		}

		if (requestParameters['email'] != null) {
			queryParameters['email'] = requestParameters['email'];
		}

		if (requestParameters['matriculado'] != null) {
			queryParameters['matriculado'] = requestParameters['matriculado'];
		}

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
	}

	/**
	 * Obtiene una lista de alumnos con filtros opcionales sin paginación (DEPRECATED - usar /paged)
	 * Obtener alumnos (DEPRECATED)
	 * @deprecated
	 */
	async obtenerAlumnos(
		requestParameters: ObtenerAlumnosRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOAlumno> {
		const response = await this.obtenerAlumnosRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene una lista paginada de alumnos habilitados y matriculados para inscripción (requiere rol ADMIN o PROFESOR)
	 * Obtener alumnos disponibles
	 */
	async obtenerAlumnosDisponiblesRaw(
		requestParameters: ObtenerAlumnosDisponiblesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTORespuestaPaginada>> {
		const queryParameters: any = {};

		if (requestParameters['page'] != null) {
			queryParameters['page'] = requestParameters['page'];
		}

		if (requestParameters['size'] != null) {
			queryParameters['size'] = requestParameters['size'];
		}

		if (requestParameters['sortBy'] != null) {
			queryParameters['sortBy'] = requestParameters['sortBy'];
		}

		if (requestParameters['sortDirection'] != null) {
			queryParameters['sortDirection'] = requestParameters['sortDirection'];
		}

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/disponibles`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) =>
			DTORespuestaPaginadaFromJSON(jsonValue)
		);
	}

	/**
	 * Obtiene una lista paginada de alumnos habilitados y matriculados para inscripción (requiere rol ADMIN o PROFESOR)
	 * Obtener alumnos disponibles
	 */
	async obtenerAlumnosDisponibles(
		requestParameters: ObtenerAlumnosDisponiblesRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTORespuestaPaginada> {
		const response = await this.obtenerAlumnosDisponiblesRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * @deprecated
	 */
	async obtenerAlumnosMatriculadosRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOAlumno>>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/matriculados`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOAlumnoFromJSON));
	}

	/**
	 * @deprecated
	 */
	async obtenerAlumnosMatriculados(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOAlumno>> {
		const response = await this.obtenerAlumnosMatriculadosRaw(initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene una lista paginada de alumnos matriculados (requiere rol ADMIN o PROFESOR)
	 * Obtener alumnos matriculados paginados
	 */
	async obtenerAlumnosMatriculadosPaginadosRaw(
		requestParameters: ObtenerAlumnosMatriculadosPaginadosRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTORespuestaPaginada>> {
		const queryParameters: any = {};

		if (requestParameters['page'] != null) {
			queryParameters['page'] = requestParameters['page'];
		}

		if (requestParameters['size'] != null) {
			queryParameters['size'] = requestParameters['size'];
		}

		if (requestParameters['sortBy'] != null) {
			queryParameters['sortBy'] = requestParameters['sortBy'];
		}

		if (requestParameters['sortDirection'] != null) {
			queryParameters['sortDirection'] = requestParameters['sortDirection'];
		}

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/matriculados/paged`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) =>
			DTORespuestaPaginadaFromJSON(jsonValue)
		);
	}

	/**
	 * Obtiene una lista paginada de alumnos matriculados (requiere rol ADMIN o PROFESOR)
	 * Obtener alumnos matriculados paginados
	 */
	async obtenerAlumnosMatriculadosPaginados(
		requestParameters: ObtenerAlumnosMatriculadosPaginadosRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTORespuestaPaginada> {
		const response = await this.obtenerAlumnosMatriculadosPaginadosRaw(
			requestParameters,
			initOverrides
		);
		return await response.value();
	}

	/**
	 * @deprecated
	 */
	async obtenerAlumnosNoMatriculadosRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOAlumno>>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/no-matriculados`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOAlumnoFromJSON));
	}

	/**
	 * @deprecated
	 */
	async obtenerAlumnosNoMatriculados(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOAlumno>> {
		const response = await this.obtenerAlumnosNoMatriculadosRaw(initOverrides);
		return await response.value();
	}

	/**
	 */
	async obtenerAlumnosNoMatriculadosPaginadosRaw(
		requestParameters: ObtenerAlumnosNoMatriculadosPaginadosRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTORespuestaPaginadaDTOAlumno>> {
		const queryParameters: any = {};

		if (requestParameters['page'] != null) {
			queryParameters['page'] = requestParameters['page'];
		}

		if (requestParameters['size'] != null) {
			queryParameters['size'] = requestParameters['size'];
		}

		if (requestParameters['sortBy'] != null) {
			queryParameters['sortBy'] = requestParameters['sortBy'];
		}

		if (requestParameters['sortDirection'] != null) {
			queryParameters['sortDirection'] = requestParameters['sortDirection'];
		}

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/no-matriculados/paged`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) =>
			DTORespuestaPaginadaDTOAlumnoFromJSON(jsonValue)
		);
	}

	/**
	 */
	async obtenerAlumnosNoMatriculadosPaginados(
		requestParameters: ObtenerAlumnosNoMatriculadosPaginadosRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTORespuestaPaginadaDTOAlumno> {
		const response = await this.obtenerAlumnosNoMatriculadosPaginadosRaw(
			requestParameters,
			initOverrides
		);
		return await response.value();
	}

	/**
	 * Obtiene una lista paginada de alumnos con filtros opcionales (requiere rol ADMIN o PROFESOR)
	 * Obtener alumnos paginados
	 */
	async obtenerAlumnosPaginadosRaw(
		requestParameters: ObtenerAlumnosPaginadosRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTORespuestaPaginada>> {
		const queryParameters: any = {};

		if (requestParameters['q'] != null) {
			queryParameters['q'] = requestParameters['q'];
		}

		if (requestParameters['nombre'] != null) {
			queryParameters['nombre'] = requestParameters['nombre'];
		}

		if (requestParameters['apellidos'] != null) {
			queryParameters['apellidos'] = requestParameters['apellidos'];
		}

		if (requestParameters['dni'] != null) {
			queryParameters['dni'] = requestParameters['dni'];
		}

		if (requestParameters['email'] != null) {
			queryParameters['email'] = requestParameters['email'];
		}

		if (requestParameters['matriculado'] != null) {
			queryParameters['matriculado'] = requestParameters['matriculado'];
		}

		if (requestParameters['page'] != null) {
			queryParameters['page'] = requestParameters['page'];
		}

		if (requestParameters['size'] != null) {
			queryParameters['size'] = requestParameters['size'];
		}

		if (requestParameters['sortBy'] != null) {
			queryParameters['sortBy'] = requestParameters['sortBy'];
		}

		if (requestParameters['sortDirection'] != null) {
			queryParameters['sortDirection'] = requestParameters['sortDirection'];
		}

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/paged`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) =>
			DTORespuestaPaginadaFromJSON(jsonValue)
		);
	}

	/**
	 * Obtiene una lista paginada de alumnos con filtros opcionales (requiere rol ADMIN o PROFESOR)
	 * Obtener alumnos paginados
	 */
	async obtenerAlumnosPaginados(
		requestParameters: ObtenerAlumnosPaginadosRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTORespuestaPaginada> {
		const response = await this.obtenerAlumnosPaginadosRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async obtenerClasesInscritasConDetallesRaw(
		requestParameters: ObtenerClasesInscritasConDetallesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOClaseInscrita>>> {
		if (requestParameters['alumnoId'] == null) {
			throw new runtime.RequiredError(
				'alumnoId',
				'Required parameter "alumnoId" was null or undefined when calling obtenerClasesInscritasConDetalles().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/{alumnoId}/clases`;
		urlPath = urlPath.replace(
			`{${'alumnoId'}}`,
			encodeURIComponent(String(requestParameters['alumnoId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) =>
			jsonValue.map(DTOClaseInscritaFromJSON)
		);
	}

	/**
	 */
	async obtenerClasesInscritasConDetalles(
		requestParameters: ObtenerClasesInscritasConDetallesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOClaseInscrita>> {
		const response = await this.obtenerClasesInscritasConDetallesRaw(
			requestParameters,
			initOverrides
		);
		return await response.value();
	}

	/**
	 */
	async obtenerEstadisticasMatriculasRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<{ [key: string]: number }>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/estadisticas/matriculas`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse<any>(response);
	}

	/**
	 */
	async obtenerEstadisticasMatriculas(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<{ [key: string]: number }> {
		const response = await this.obtenerEstadisticasMatriculasRaw(initOverrides);
		return await response.value();
	}

	/**
	 */
	async obtenerMiPerfilRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOPerfilAlumno>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/mi-perfil`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOPerfilAlumnoFromJSON(jsonValue));
	}

	/**
	 */
	async obtenerMiPerfil(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOPerfilAlumno> {
		const response = await this.obtenerMiPerfilRaw(initOverrides);
		return await response.value();
	}

	/**
	 */
	async obtenerTotalAlumnosRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<{ [key: string]: number }>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/alumnos/estadisticas/total`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse<any>(response);
	}

	/**
	 */
	async obtenerTotalAlumnos(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<{ [key: string]: number }> {
		const response = await this.obtenerTotalAlumnosRaw(initOverrides);
		return await response.value();
	}
}
