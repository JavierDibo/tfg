/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DTOClase,
  DTOCurso,
  DTOParametrosBusquedaClase,
  DTOPeticionCrearCurso,
  DTOPeticionCrearTaller,
  DTORespuestaPaginadaDTOClase,
  DTOTaller,
  Material,
} from '../models/index';
import {
    DTOClaseFromJSON,
    DTOClaseToJSON,
    DTOCursoFromJSON,
    DTOCursoToJSON,
    DTOParametrosBusquedaClaseFromJSON,
    DTOParametrosBusquedaClaseToJSON,
    DTOPeticionCrearCursoFromJSON,
    DTOPeticionCrearCursoToJSON,
    DTOPeticionCrearTallerFromJSON,
    DTOPeticionCrearTallerToJSON,
    DTORespuestaPaginadaDTOClaseFromJSON,
    DTORespuestaPaginadaDTOClaseToJSON,
    DTOTallerFromJSON,
    DTOTallerToJSON,
    MaterialFromJSON,
    MaterialToJSON,
} from '../models/index';

export interface AgregarAlumnoRequest {
    claseId: number;
    alumnoId: string;
}

export interface AgregarEjercicioRequest {
    claseId: number;
    ejercicioId: string;
}

export interface AgregarMaterialRequest {
    claseId: number;
    material: Material;
}

export interface AgregarProfesorRequest {
    claseId: number;
    profesorId: string;
}

export interface BorrarClasePorIdRequest {
    id: number;
}

export interface BorrarClasePorTituloRequest {
    titulo: string;
}

export interface BuscarClasesRequest {
    dTOParametrosBusquedaClase: DTOParametrosBusquedaClase;
}

export interface ContarAlumnosEnClaseRequest {
    claseId: number;
}

export interface ContarProfesoresEnClaseRequest {
    claseId: number;
}

export interface CrearCursoRequest {
    dTOPeticionCrearCurso: DTOPeticionCrearCurso;
}

export interface CrearTallerRequest {
    dTOPeticionCrearTaller: DTOPeticionCrearTaller;
}

export interface DarseDeBajaDeClaseRequest {
    claseId: number;
}

export interface InscribirseEnClaseRequest {
    claseId: number;
}

export interface ObtenerClasePorIdRequest {
    id: number;
}

export interface ObtenerClasePorTituloRequest {
    titulo: string;
}

export interface ObtenerClasesPorAlumnoRequest {
    alumnoId: string;
}

export interface ObtenerClasesPorProfesorRequest {
    profesorId: string;
}

export interface RemoverAlumnoRequest {
    claseId: number;
    alumnoId: string;
}

export interface RemoverEjercicioRequest {
    claseId: number;
    ejercicioId: string;
}

export interface RemoverMaterialRequest {
    claseId: number;
    materialId: string;
}

export interface RemoverProfesorRequest {
    claseId: number;
    profesorId: string;
}

/**
 * 
 */
export class ClaseRestApi extends runtime.BaseAPI {

    /**
     */
    async agregarAlumnoRaw(requestParameters: AgregarAlumnoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling agregarAlumno().'
            );
        }

        if (requestParameters['alumnoId'] == null) {
            throw new runtime.RequiredError(
                'alumnoId',
                'Required parameter "alumnoId" was null or undefined when calling agregarAlumno().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/alumnos/{alumnoId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"alumnoId"}}`, encodeURIComponent(String(requestParameters['alumnoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     */
    async agregarAlumno(requestParameters: AgregarAlumnoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.agregarAlumnoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async agregarEjercicioRaw(requestParameters: AgregarEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling agregarEjercicio().'
            );
        }

        if (requestParameters['ejercicioId'] == null) {
            throw new runtime.RequiredError(
                'ejercicioId',
                'Required parameter "ejercicioId" was null or undefined when calling agregarEjercicio().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/ejercicios/{ejercicioId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"ejercicioId"}}`, encodeURIComponent(String(requestParameters['ejercicioId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     */
    async agregarEjercicio(requestParameters: AgregarEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.agregarEjercicioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async agregarMaterialRaw(requestParameters: AgregarMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling agregarMaterial().'
            );
        }

        if (requestParameters['material'] == null) {
            throw new runtime.RequiredError(
                'material',
                'Required parameter "material" was null or undefined when calling agregarMaterial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/clases/{claseId}/material`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MaterialToJSON(requestParameters['material']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     */
    async agregarMaterial(requestParameters: AgregarMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.agregarMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async agregarProfesorRaw(requestParameters: AgregarProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling agregarProfesor().'
            );
        }

        if (requestParameters['profesorId'] == null) {
            throw new runtime.RequiredError(
                'profesorId',
                'Required parameter "profesorId" was null or undefined when calling agregarProfesor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/profesores/{profesorId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"profesorId"}}`, encodeURIComponent(String(requestParameters['profesorId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     */
    async agregarProfesor(requestParameters: AgregarProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.agregarProfesorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async borrarClasePorIdRaw(requestParameters: BorrarClasePorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling borrarClasePorId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async borrarClasePorId(requestParameters: BorrarClasePorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.borrarClasePorIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async borrarClasePorTituloRaw(requestParameters: BorrarClasePorTituloRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['titulo'] == null) {
            throw new runtime.RequiredError(
                'titulo',
                'Required parameter "titulo" was null or undefined when calling borrarClasePorTitulo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/titulo/{titulo}`;
        urlPath = urlPath.replace(`{${"titulo"}}`, encodeURIComponent(String(requestParameters['titulo'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async borrarClasePorTitulo(requestParameters: BorrarClasePorTituloRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.borrarClasePorTituloRaw(requestParameters, initOverrides);
    }

    /**
     */
    async buscarClasesRaw(requestParameters: BuscarClasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaPaginadaDTOClase>> {
        if (requestParameters['dTOParametrosBusquedaClase'] == null) {
            throw new runtime.RequiredError(
                'dTOParametrosBusquedaClase',
                'Required parameter "dTOParametrosBusquedaClase" was null or undefined when calling buscarClases().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/clases/buscar`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DTOParametrosBusquedaClaseToJSON(requestParameters['dTOParametrosBusquedaClase']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaPaginadaDTOClaseFromJSON(jsonValue));
    }

    /**
     */
    async buscarClases(requestParameters: BuscarClasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaPaginadaDTOClase> {
        const response = await this.buscarClasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contarAlumnosEnClaseRaw(requestParameters: ContarAlumnosEnClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling contarAlumnosEnClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/alumnos/contar`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async contarAlumnosEnClase(requestParameters: ContarAlumnosEnClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.contarAlumnosEnClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contarProfesoresEnClaseRaw(requestParameters: ContarProfesoresEnClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling contarProfesoresEnClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/profesores/contar`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async contarProfesoresEnClase(requestParameters: ContarProfesoresEnClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.contarProfesoresEnClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async crearCursoRaw(requestParameters: CrearCursoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOCurso>> {
        if (requestParameters['dTOPeticionCrearCurso'] == null) {
            throw new runtime.RequiredError(
                'dTOPeticionCrearCurso',
                'Required parameter "dTOPeticionCrearCurso" was null or undefined when calling crearCurso().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/clases/cursos`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DTOPeticionCrearCursoToJSON(requestParameters['dTOPeticionCrearCurso']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOCursoFromJSON(jsonValue));
    }

    /**
     */
    async crearCurso(requestParameters: CrearCursoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOCurso> {
        const response = await this.crearCursoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async crearTallerRaw(requestParameters: CrearTallerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOTaller>> {
        if (requestParameters['dTOPeticionCrearTaller'] == null) {
            throw new runtime.RequiredError(
                'dTOPeticionCrearTaller',
                'Required parameter "dTOPeticionCrearTaller" was null or undefined when calling crearTaller().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/clases/talleres`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DTOPeticionCrearTallerToJSON(requestParameters['dTOPeticionCrearTaller']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOTallerFromJSON(jsonValue));
    }

    /**
     */
    async crearTaller(requestParameters: CrearTallerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOTaller> {
        const response = await this.crearTallerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async darseDeBajaDeClaseRaw(requestParameters: DarseDeBajaDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling darseDeBajaDeClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/darse-baja`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     */
    async darseDeBajaDeClase(requestParameters: DarseDeBajaDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.darseDeBajaDeClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async inscribirseEnClaseRaw(requestParameters: InscribirseEnClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling inscribirseEnClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/inscribirse`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     */
    async inscribirseEnClase(requestParameters: InscribirseEnClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.inscribirseEnClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async obtenerClasePorIdRaw(requestParameters: ObtenerClasePorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerClasePorId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     */
    async obtenerClasePorId(requestParameters: ObtenerClasePorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.obtenerClasePorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async obtenerClasePorTituloRaw(requestParameters: ObtenerClasePorTituloRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['titulo'] == null) {
            throw new runtime.RequiredError(
                'titulo',
                'Required parameter "titulo" was null or undefined when calling obtenerClasePorTitulo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/titulo/{titulo}`;
        urlPath = urlPath.replace(`{${"titulo"}}`, encodeURIComponent(String(requestParameters['titulo'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     */
    async obtenerClasePorTitulo(requestParameters: ObtenerClasePorTituloRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.obtenerClasePorTituloRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async obtenerClasesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DTOClase>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOClaseFromJSON));
    }

    /**
     */
    async obtenerClases(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DTOClase>> {
        const response = await this.obtenerClasesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async obtenerClasesPorAlumnoRaw(requestParameters: ObtenerClasesPorAlumnoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DTOClase>>> {
        if (requestParameters['alumnoId'] == null) {
            throw new runtime.RequiredError(
                'alumnoId',
                'Required parameter "alumnoId" was null or undefined when calling obtenerClasesPorAlumno().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/alumno/{alumnoId}`;
        urlPath = urlPath.replace(`{${"alumnoId"}}`, encodeURIComponent(String(requestParameters['alumnoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOClaseFromJSON));
    }

    /**
     */
    async obtenerClasesPorAlumno(requestParameters: ObtenerClasesPorAlumnoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DTOClase>> {
        const response = await this.obtenerClasesPorAlumnoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async obtenerClasesPorProfesorRaw(requestParameters: ObtenerClasesPorProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DTOClase>>> {
        if (requestParameters['profesorId'] == null) {
            throw new runtime.RequiredError(
                'profesorId',
                'Required parameter "profesorId" was null or undefined when calling obtenerClasesPorProfesor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/profesor/{profesorId}`;
        urlPath = urlPath.replace(`{${"profesorId"}}`, encodeURIComponent(String(requestParameters['profesorId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOClaseFromJSON));
    }

    /**
     */
    async obtenerClasesPorProfesor(requestParameters: ObtenerClasesPorProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DTOClase>> {
        const response = await this.obtenerClasesPorProfesorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removerAlumnoRaw(requestParameters: RemoverAlumnoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling removerAlumno().'
            );
        }

        if (requestParameters['alumnoId'] == null) {
            throw new runtime.RequiredError(
                'alumnoId',
                'Required parameter "alumnoId" was null or undefined when calling removerAlumno().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/alumnos/{alumnoId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"alumnoId"}}`, encodeURIComponent(String(requestParameters['alumnoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     */
    async removerAlumno(requestParameters: RemoverAlumnoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.removerAlumnoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removerEjercicioRaw(requestParameters: RemoverEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling removerEjercicio().'
            );
        }

        if (requestParameters['ejercicioId'] == null) {
            throw new runtime.RequiredError(
                'ejercicioId',
                'Required parameter "ejercicioId" was null or undefined when calling removerEjercicio().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/ejercicios/{ejercicioId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"ejercicioId"}}`, encodeURIComponent(String(requestParameters['ejercicioId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     */
    async removerEjercicio(requestParameters: RemoverEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.removerEjercicioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removerMaterialRaw(requestParameters: RemoverMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling removerMaterial().'
            );
        }

        if (requestParameters['materialId'] == null) {
            throw new runtime.RequiredError(
                'materialId',
                'Required parameter "materialId" was null or undefined when calling removerMaterial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/material/{materialId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"materialId"}}`, encodeURIComponent(String(requestParameters['materialId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     */
    async removerMaterial(requestParameters: RemoverMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.removerMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removerProfesorRaw(requestParameters: RemoverProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling removerProfesor().'
            );
        }

        if (requestParameters['profesorId'] == null) {
            throw new runtime.RequiredError(
                'profesorId',
                'Required parameter "profesorId" was null or undefined when calling removerProfesor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/profesores/{profesorId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"profesorId"}}`, encodeURIComponent(String(requestParameters['profesorId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     */
    async removerProfesor(requestParameters: RemoverProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.removerProfesorRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
