/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DTOActualizacionAlumno,
  DTOAlumno,
  DTOClaseInscrita,
  DTOPeticionRegistroAlumno,
  DTORespuestaPaginada,
  DTORespuestaPaginadaDTOAlumno,
} from '../models/index';
import {
    DTOActualizacionAlumnoFromJSON,
    DTOActualizacionAlumnoToJSON,
    DTOAlumnoFromJSON,
    DTOAlumnoToJSON,
    DTOClaseInscritaFromJSON,
    DTOClaseInscritaToJSON,
    DTOPeticionRegistroAlumnoFromJSON,
    DTOPeticionRegistroAlumnoToJSON,
    DTORespuestaPaginadaFromJSON,
    DTORespuestaPaginadaToJSON,
    DTORespuestaPaginadaDTOAlumnoFromJSON,
    DTORespuestaPaginadaDTOAlumnoToJSON,
} from '../models/index';

export interface ActualizarAlumnoRequest {
    id: number;
    dTOActualizacionAlumno: DTOActualizacionAlumno;
}

export interface BorrarAlumnoPorIdRequest {
    id: number;
}

export interface CrearAlumnoRequest {
    dTOPeticionRegistroAlumno: DTOPeticionRegistroAlumno;
}

export interface ObtenerAlumnoPorIdRequest {
    id: number;
}

export interface ObtenerAlumnosRequest {
    q?: string;
    firstName?: string;
    lastName?: string;
    dni?: string;
    email?: string;
    enrolled?: boolean;
    enabled?: boolean;
    available?: boolean;
    page?: number;
    size?: number;
    sortBy?: string;
    sortDirection?: string;
}

export interface ObtenerClasesInscritasRequest {
    id: number;
}

/**
 * 
 */
export class StudentsApi extends runtime.BaseAPI {

    /**
     * Partially updates an existing student. Students can only update their own profile. Administrators can change enrollment and enabled status.
     * Update student partially
     */
    async actualizarAlumnoRaw(requestParameters: ActualizarAlumnoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOAlumno>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling actualizarAlumno().'
            );
        }

        if (requestParameters['dTOActualizacionAlumno'] == null) {
            throw new runtime.RequiredError(
                'dTOActualizacionAlumno',
                'Required parameter "dTOActualizacionAlumno" was null or undefined when calling actualizarAlumno().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/alumnos/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DTOActualizacionAlumnoToJSON(requestParameters['dTOActualizacionAlumno']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
    }

    /**
     * Partially updates an existing student. Students can only update their own profile. Administrators can change enrollment and enabled status.
     * Update student partially
     */
    async actualizarAlumno(requestParameters: ActualizarAlumnoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOAlumno> {
        const response = await this.actualizarAlumnoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a student from the system (requires ADMIN role)
     * Delete student
     */
    async borrarAlumnoPorIdRaw(requestParameters: BorrarAlumnoPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOAlumno>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling borrarAlumnoPorId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/alumnos/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
    }

    /**
     * Deletes a student from the system (requires ADMIN role)
     * Delete student
     */
    async borrarAlumnoPorId(requestParameters: BorrarAlumnoPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOAlumno> {
        const response = await this.borrarAlumnoPorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new student in the system (requires ADMIN role)
     * Create new student
     */
    async crearAlumnoRaw(requestParameters: CrearAlumnoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOAlumno>> {
        if (requestParameters['dTOPeticionRegistroAlumno'] == null) {
            throw new runtime.RequiredError(
                'dTOPeticionRegistroAlumno',
                'Required parameter "dTOPeticionRegistroAlumno" was null or undefined when calling crearAlumno().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/alumnos`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DTOPeticionRegistroAlumnoToJSON(requestParameters['dTOPeticionRegistroAlumno']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
    }

    /**
     * Creates a new student in the system (requires ADMIN role)
     * Create new student
     */
    async crearAlumno(requestParameters: CrearAlumnoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOAlumno> {
        const response = await this.crearAlumnoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a specific student by their ID. Students can only see their own profile.
     * Get student by ID
     */
    async obtenerAlumnoPorIdRaw(requestParameters: ObtenerAlumnoPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOAlumno>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerAlumnoPorId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/alumnos/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOAlumnoFromJSON(jsonValue));
    }

    /**
     * Gets a specific student by their ID. Students can only see their own profile.
     * Get student by ID
     */
    async obtenerAlumnoPorId(requestParameters: ObtenerAlumnoPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOAlumno> {
        const response = await this.obtenerAlumnoPorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a paginated list of students with optional filters. Students can only see their own profile.
     * Get paginated students
     */
    async obtenerAlumnosRaw(requestParameters: ObtenerAlumnosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaPaginada>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['firstName'] != null) {
            queryParameters['firstName'] = requestParameters['firstName'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['lastName'] = requestParameters['lastName'];
        }

        if (requestParameters['dni'] != null) {
            queryParameters['dni'] = requestParameters['dni'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['enrolled'] != null) {
            queryParameters['enrolled'] = requestParameters['enrolled'];
        }

        if (requestParameters['enabled'] != null) {
            queryParameters['enabled'] = requestParameters['enabled'];
        }

        if (requestParameters['available'] != null) {
            queryParameters['available'] = requestParameters['available'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDirection'] != null) {
            queryParameters['sortDirection'] = requestParameters['sortDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/alumnos`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaPaginadaFromJSON(jsonValue));
    }

    /**
     * Gets a paginated list of students with optional filters. Students can only see their own profile.
     * Get paginated students
     */
    async obtenerAlumnos(requestParameters: ObtenerAlumnosRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaPaginada> {
        const response = await this.obtenerAlumnosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the classes in which a specific student is enrolled
     * Get classes enrolled by student
     */
    async obtenerClasesInscritasRaw(requestParameters: ObtenerClasesInscritasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClaseInscrita<any>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerClasesInscritas().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/alumnos/{id}/clases`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets the classes in which a specific student is enrolled
     * Get classes enrolled by student
     */
    async obtenerClasesInscritas(requestParameters: ObtenerClasesInscritasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClaseInscrita<any>> {
        const response = await this.obtenerClasesInscritasRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
