/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DTOActualizacionProfesor,
  DTOClase,
  DTOPeticionRegistroProfesor,
  DTOProfesor,
  DTOProfesorPublico,
  DTORespuestaPaginada,
  DTORespuestaPaginadaDTOProfesor,
} from '../models/index';
import {
    DTOActualizacionProfesorFromJSON,
    DTOActualizacionProfesorToJSON,
    DTOClaseFromJSON,
    DTOClaseToJSON,
    DTOPeticionRegistroProfesorFromJSON,
    DTOPeticionRegistroProfesorToJSON,
    DTOProfesorFromJSON,
    DTOProfesorToJSON,
    DTOProfesorPublicoFromJSON,
    DTOProfesorPublicoToJSON,
    DTORespuestaPaginadaFromJSON,
    DTORespuestaPaginadaToJSON,
    DTORespuestaPaginadaDTOProfesorFromJSON,
    DTORespuestaPaginadaDTOProfesorToJSON,
} from '../models/index';

export interface ActualizarProfesorRequest {
    id: number;
    dTOActualizacionProfesor: DTOActualizacionProfesor;
}

export interface AsignarClaseRequest {
    id: number;
    claseId: string;
}

export interface BorrarProfesorPorIdRequest {
    id: number;
}

export interface CrearProfesorRequest {
    dTOPeticionRegistroProfesor: DTOPeticionRegistroProfesor;
}

export interface ObtenerClasesProfesorRequest {
    id: number;
}

export interface ObtenerProfesorPorIdRequest {
    id: number;
}

export interface ObtenerProfesorPublicoRequest {
    id: number;
}

export interface ObtenerProfesoresRequest {
    q?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    username?: string;
    dni?: string;
    enabled?: boolean;
    claseId?: string;
    sinClases?: boolean;
    page?: number;
    size?: number;
    sortBy?: string;
    sortDirection?: string;
}

export interface RemoverClaseRequest {
    id: number;
    claseId: string;
}

/**
 * 
 */
export class ProfessorsApi extends runtime.BaseAPI {

    /**
     * Partially updates an existing professor. Professors can only update their own profile.
     * Update professor partially
     */
    async actualizarProfesorRaw(requestParameters: ActualizarProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOProfesor>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling actualizarProfesor().'
            );
        }

        if (requestParameters['dTOActualizacionProfesor'] == null) {
            throw new runtime.RequiredError(
                'dTOActualizacionProfesor',
                'Required parameter "dTOActualizacionProfesor" was null or undefined when calling actualizarProfesor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/profesores/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DTOActualizacionProfesorToJSON(requestParameters['dTOActualizacionProfesor']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorFromJSON(jsonValue));
    }

    /**
     * Partially updates an existing professor. Professors can only update their own profile.
     * Update professor partially
     */
    async actualizarProfesor(requestParameters: ActualizarProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOProfesor> {
        const response = await this.actualizarProfesorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns a specific class to a professor
     * Assign class to professor
     */
    async asignarClaseRaw(requestParameters: AsignarClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOProfesor>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling asignarClase().'
            );
        }

        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling asignarClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/profesores/{id}/clases/{claseId}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorFromJSON(jsonValue));
    }

    /**
     * Assigns a specific class to a professor
     * Assign class to professor
     */
    async asignarClase(requestParameters: AsignarClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOProfesor> {
        const response = await this.asignarClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a professor from the system (requires ADMIN role)
     * Delete professor
     */
    async borrarProfesorPorIdRaw(requestParameters: BorrarProfesorPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling borrarProfesorPorId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/profesores/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes a professor from the system (requires ADMIN role)
     * Delete professor
     */
    async borrarProfesorPorId(requestParameters: BorrarProfesorPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.borrarProfesorPorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new professor in the system (requires ADMIN role)
     * Create new professor
     */
    async crearProfesorRaw(requestParameters: CrearProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOProfesor>> {
        if (requestParameters['dTOPeticionRegistroProfesor'] == null) {
            throw new runtime.RequiredError(
                'dTOPeticionRegistroProfesor',
                'Required parameter "dTOPeticionRegistroProfesor" was null or undefined when calling crearProfesor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/profesores`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DTOPeticionRegistroProfesorToJSON(requestParameters['dTOPeticionRegistroProfesor']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorFromJSON(jsonValue));
    }

    /**
     * Creates a new professor in the system (requires ADMIN role)
     * Create new professor
     */
    async crearProfesor(requestParameters: CrearProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOProfesor> {
        const response = await this.crearProfesorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all classes assigned to a specific professor
     * Get professor\'s classes
     */
    async obtenerClasesProfesorRaw(requestParameters: ObtenerClasesProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase<any>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerClasesProfesor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/profesores/{id}/clases`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets all classes assigned to a specific professor
     * Get professor\'s classes
     */
    async obtenerClasesProfesor(requestParameters: ObtenerClasesProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase<any>> {
        const response = await this.obtenerClasesProfesorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a specific professor by their ID. Professors can only see their own profile.
     * Get professor by ID
     */
    async obtenerProfesorPorIdRaw(requestParameters: ObtenerProfesorPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOProfesor>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerProfesorPorId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/profesores/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorFromJSON(jsonValue));
    }

    /**
     * Gets a specific professor by their ID. Professors can only see their own profile.
     * Get professor by ID
     */
    async obtenerProfesorPorId(requestParameters: ObtenerProfesorPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOProfesor> {
        const response = await this.obtenerProfesorPorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets public information about a professor. Accessible to all authenticated users.
     * Get public professor information
     */
    async obtenerProfesorPublicoRaw(requestParameters: ObtenerProfesorPublicoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOProfesorPublico>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerProfesorPublico().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/profesores/{id}/public`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorPublicoFromJSON(jsonValue));
    }

    /**
     * Gets public information about a professor. Accessible to all authenticated users.
     * Get public professor information
     */
    async obtenerProfesorPublico(requestParameters: ObtenerProfesorPublicoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOProfesorPublico> {
        const response = await this.obtenerProfesorPublicoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a paginated list of professors with optional filters. Professors can only see their own profile.
     * Get paginated professors
     */
    async obtenerProfesoresRaw(requestParameters: ObtenerProfesoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaPaginada>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['firstName'] != null) {
            queryParameters['firstName'] = requestParameters['firstName'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['lastName'] = requestParameters['lastName'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        if (requestParameters['dni'] != null) {
            queryParameters['dni'] = requestParameters['dni'];
        }

        if (requestParameters['enabled'] != null) {
            queryParameters['enabled'] = requestParameters['enabled'];
        }

        if (requestParameters['claseId'] != null) {
            queryParameters['claseId'] = requestParameters['claseId'];
        }

        if (requestParameters['sinClases'] != null) {
            queryParameters['sinClases'] = requestParameters['sinClases'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDirection'] != null) {
            queryParameters['sortDirection'] = requestParameters['sortDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/profesores`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaPaginadaFromJSON(jsonValue));
    }

    /**
     * Gets a paginated list of professors with optional filters. Professors can only see their own profile.
     * Get paginated professors
     */
    async obtenerProfesores(requestParameters: ObtenerProfesoresRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaPaginada> {
        const response = await this.obtenerProfesoresRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a specific class from a professor
     * Remove class from professor
     */
    async removerClaseRaw(requestParameters: RemoverClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOProfesor>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removerClase().'
            );
        }

        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling removerClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/profesores/{id}/clases/{claseId}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOProfesorFromJSON(jsonValue));
    }

    /**
     * Removes a specific class from a professor
     * Remove class from professor
     */
    async removerClase(requestParameters: RemoverClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOProfesor> {
        const response = await this.removerClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
