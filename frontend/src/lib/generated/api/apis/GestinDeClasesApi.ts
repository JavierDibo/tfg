/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gestión de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { DTOClase, Material } from '../models/index';
import {
	DTOClaseFromJSON,
	DTOClaseToJSON,
	MaterialFromJSON,
	MaterialToJSON
} from '../models/index';

export interface AgregarAlumnoRequest {
	claseId: number;
	alumnoId: string;
}

export interface AgregarEjercicioRequest {
	claseId: number;
	ejercicioId: string;
}

export interface AgregarMaterialRequest {
	claseId: number;
	material: Material;
}

export interface AgregarProfesorRequest {
	claseId: number;
	profesorId: string;
}

export interface RemoverAlumnoRequest {
	claseId: number;
	alumnoId: string;
}

export interface RemoverEjercicioRequest {
	claseId: number;
	ejercicioId: string;
}

export interface RemoverMaterialRequest {
	claseId: number;
	materialId: string;
}

export interface RemoverProfesorRequest {
	claseId: number;
	profesorId: string;
}

/**
 *
 */
export class GestinDeClasesApi extends runtime.BaseAPI {
	/**
	 * Agrega un alumno directamente a una clase
	 * Agregar alumno a clase
	 */
	async agregarAlumnoRaw(
		requestParameters: AgregarAlumnoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOClase>> {
		if (requestParameters['claseId'] == null) {
			throw new runtime.RequiredError(
				'claseId',
				'Required parameter "claseId" was null or undefined when calling agregarAlumno().'
			);
		}

		if (requestParameters['alumnoId'] == null) {
			throw new runtime.RequiredError(
				'alumnoId',
				'Required parameter "alumnoId" was null or undefined when calling agregarAlumno().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/{claseId}/alumnos/{alumnoId}`;
		urlPath = urlPath.replace(
			`{${'claseId'}}`,
			encodeURIComponent(String(requestParameters['claseId']))
		);
		urlPath = urlPath.replace(
			`{${'alumnoId'}}`,
			encodeURIComponent(String(requestParameters['alumnoId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
	}

	/**
	 * Agrega un alumno directamente a una clase
	 * Agregar alumno a clase
	 */
	async agregarAlumno(
		requestParameters: AgregarAlumnoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOClase> {
		const response = await this.agregarAlumnoRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Agrega un ejercicio a una clase específica
	 * Agregar ejercicio a clase
	 */
	async agregarEjercicioRaw(
		requestParameters: AgregarEjercicioRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOClase>> {
		if (requestParameters['claseId'] == null) {
			throw new runtime.RequiredError(
				'claseId',
				'Required parameter "claseId" was null or undefined when calling agregarEjercicio().'
			);
		}

		if (requestParameters['ejercicioId'] == null) {
			throw new runtime.RequiredError(
				'ejercicioId',
				'Required parameter "ejercicioId" was null or undefined when calling agregarEjercicio().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/{claseId}/ejercicios/{ejercicioId}`;
		urlPath = urlPath.replace(
			`{${'claseId'}}`,
			encodeURIComponent(String(requestParameters['claseId']))
		);
		urlPath = urlPath.replace(
			`{${'ejercicioId'}}`,
			encodeURIComponent(String(requestParameters['ejercicioId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
	}

	/**
	 * Agrega un ejercicio a una clase específica
	 * Agregar ejercicio a clase
	 */
	async agregarEjercicio(
		requestParameters: AgregarEjercicioRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOClase> {
		const response = await this.agregarEjercicioRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Agrega material a una clase específica
	 * Agregar material a clase
	 */
	async agregarMaterialRaw(
		requestParameters: AgregarMaterialRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOClase>> {
		if (requestParameters['claseId'] == null) {
			throw new runtime.RequiredError(
				'claseId',
				'Required parameter "claseId" was null or undefined when calling agregarMaterial().'
			);
		}

		if (requestParameters['material'] == null) {
			throw new runtime.RequiredError(
				'material',
				'Required parameter "material" was null or undefined when calling agregarMaterial().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/api/clases/{claseId}/material`;
		urlPath = urlPath.replace(
			`{${'claseId'}}`,
			encodeURIComponent(String(requestParameters['claseId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: MaterialToJSON(requestParameters['material'])
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
	}

	/**
	 * Agrega material a una clase específica
	 * Agregar material a clase
	 */
	async agregarMaterial(
		requestParameters: AgregarMaterialRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOClase> {
		const response = await this.agregarMaterialRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Agrega un profesor a una clase específica
	 * Agregar profesor a clase
	 */
	async agregarProfesorRaw(
		requestParameters: AgregarProfesorRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOClase>> {
		if (requestParameters['claseId'] == null) {
			throw new runtime.RequiredError(
				'claseId',
				'Required parameter "claseId" was null or undefined when calling agregarProfesor().'
			);
		}

		if (requestParameters['profesorId'] == null) {
			throw new runtime.RequiredError(
				'profesorId',
				'Required parameter "profesorId" was null or undefined when calling agregarProfesor().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/{claseId}/profesores/{profesorId}`;
		urlPath = urlPath.replace(
			`{${'claseId'}}`,
			encodeURIComponent(String(requestParameters['claseId']))
		);
		urlPath = urlPath.replace(
			`{${'profesorId'}}`,
			encodeURIComponent(String(requestParameters['profesorId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
	}

	/**
	 * Agrega un profesor a una clase específica
	 * Agregar profesor a clase
	 */
	async agregarProfesor(
		requestParameters: AgregarProfesorRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOClase> {
		const response = await this.agregarProfesorRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Remueve un alumno directamente de una clase
	 * Remover alumno de clase
	 */
	async removerAlumnoRaw(
		requestParameters: RemoverAlumnoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOClase>> {
		if (requestParameters['claseId'] == null) {
			throw new runtime.RequiredError(
				'claseId',
				'Required parameter "claseId" was null or undefined when calling removerAlumno().'
			);
		}

		if (requestParameters['alumnoId'] == null) {
			throw new runtime.RequiredError(
				'alumnoId',
				'Required parameter "alumnoId" was null or undefined when calling removerAlumno().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/{claseId}/alumnos/{alumnoId}`;
		urlPath = urlPath.replace(
			`{${'claseId'}}`,
			encodeURIComponent(String(requestParameters['claseId']))
		);
		urlPath = urlPath.replace(
			`{${'alumnoId'}}`,
			encodeURIComponent(String(requestParameters['alumnoId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
	}

	/**
	 * Remueve un alumno directamente de una clase
	 * Remover alumno de clase
	 */
	async removerAlumno(
		requestParameters: RemoverAlumnoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOClase> {
		const response = await this.removerAlumnoRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Remueve un ejercicio de una clase específica
	 * Remover ejercicio de clase
	 */
	async removerEjercicioRaw(
		requestParameters: RemoverEjercicioRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOClase>> {
		if (requestParameters['claseId'] == null) {
			throw new runtime.RequiredError(
				'claseId',
				'Required parameter "claseId" was null or undefined when calling removerEjercicio().'
			);
		}

		if (requestParameters['ejercicioId'] == null) {
			throw new runtime.RequiredError(
				'ejercicioId',
				'Required parameter "ejercicioId" was null or undefined when calling removerEjercicio().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/{claseId}/ejercicios/{ejercicioId}`;
		urlPath = urlPath.replace(
			`{${'claseId'}}`,
			encodeURIComponent(String(requestParameters['claseId']))
		);
		urlPath = urlPath.replace(
			`{${'ejercicioId'}}`,
			encodeURIComponent(String(requestParameters['ejercicioId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
	}

	/**
	 * Remueve un ejercicio de una clase específica
	 * Remover ejercicio de clase
	 */
	async removerEjercicio(
		requestParameters: RemoverEjercicioRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOClase> {
		const response = await this.removerEjercicioRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Remueve material de una clase específica
	 * Remover material de clase
	 */
	async removerMaterialRaw(
		requestParameters: RemoverMaterialRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOClase>> {
		if (requestParameters['claseId'] == null) {
			throw new runtime.RequiredError(
				'claseId',
				'Required parameter "claseId" was null or undefined when calling removerMaterial().'
			);
		}

		if (requestParameters['materialId'] == null) {
			throw new runtime.RequiredError(
				'materialId',
				'Required parameter "materialId" was null or undefined when calling removerMaterial().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/{claseId}/material/{materialId}`;
		urlPath = urlPath.replace(
			`{${'claseId'}}`,
			encodeURIComponent(String(requestParameters['claseId']))
		);
		urlPath = urlPath.replace(
			`{${'materialId'}}`,
			encodeURIComponent(String(requestParameters['materialId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
	}

	/**
	 * Remueve material de una clase específica
	 * Remover material de clase
	 */
	async removerMaterial(
		requestParameters: RemoverMaterialRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOClase> {
		const response = await this.removerMaterialRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Remueve un profesor de una clase específica
	 * Remover profesor de clase
	 */
	async removerProfesorRaw(
		requestParameters: RemoverProfesorRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOClase>> {
		if (requestParameters['claseId'] == null) {
			throw new runtime.RequiredError(
				'claseId',
				'Required parameter "claseId" was null or undefined when calling removerProfesor().'
			);
		}

		if (requestParameters['profesorId'] == null) {
			throw new runtime.RequiredError(
				'profesorId',
				'Required parameter "profesorId" was null or undefined when calling removerProfesor().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/{claseId}/profesores/{profesorId}`;
		urlPath = urlPath.replace(
			`{${'claseId'}}`,
			encodeURIComponent(String(requestParameters['claseId']))
		);
		urlPath = urlPath.replace(
			`{${'profesorId'}}`,
			encodeURIComponent(String(requestParameters['profesorId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
	}

	/**
	 * Remueve un profesor de una clase específica
	 * Remover profesor de clase
	 */
	async removerProfesor(
		requestParameters: RemoverProfesorRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOClase> {
		const response = await this.removerProfesorRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
