/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gestión de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
	DTOClase,
	DTOCurso,
	DTOParametrosBusquedaClase,
	DTOPeticionCrearCurso,
	DTOPeticionCrearTaller,
	DTORespuestaPaginadaDTOClase,
	DTOTaller
} from '../models/index';
import {
	DTOClaseFromJSON,
	DTOClaseToJSON,
	DTOCursoFromJSON,
	DTOCursoToJSON,
	DTOParametrosBusquedaClaseFromJSON,
	DTOParametrosBusquedaClaseToJSON,
	DTOPeticionCrearCursoFromJSON,
	DTOPeticionCrearCursoToJSON,
	DTOPeticionCrearTallerFromJSON,
	DTOPeticionCrearTallerToJSON,
	DTORespuestaPaginadaDTOClaseFromJSON,
	DTORespuestaPaginadaDTOClaseToJSON,
	DTOTallerFromJSON,
	DTOTallerToJSON
} from '../models/index';

export interface BorrarClasePorIdRequest {
	id: number;
}

export interface BorrarClasePorTituloRequest {
	titulo: string;
}

export interface BuscarClasesRequest {
	dTOParametrosBusquedaClase: DTOParametrosBusquedaClase;
}

export interface BuscarClasesPorTerminoGeneralRequest {
	q: string;
}

export interface BuscarClasesPorTituloRequest {
	titulo: string;
}

export interface ContarAlumnosEnClaseRequest {
	claseId: number;
}

export interface ContarProfesoresEnClaseRequest {
	claseId: number;
}

export interface CrearCursoRequest {
	dTOPeticionCrearCurso: DTOPeticionCrearCurso;
}

export interface CrearTallerRequest {
	dTOPeticionCrearTaller: DTOPeticionCrearTaller;
}

export interface ObtenerClasePorIdRequest {
	id: number;
}

export interface ObtenerClasePorTituloRequest {
	titulo: string;
}

export interface ObtenerClasesPorAlumnoRequest {
	alumnoId: string;
}

export interface ObtenerClasesPorProfesorRequest {
	profesorId: string;
}

/**
 *
 */
export class ClasesApi extends runtime.BaseAPI {
	/**
	 * Elimina una clase por su ID
	 * Eliminar clase por ID
	 */
	async borrarClasePorIdRaw(
		requestParameters: BorrarClasePorIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling borrarClasePorId().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/{id}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Elimina una clase por su ID
	 * Eliminar clase por ID
	 */
	async borrarClasePorId(
		requestParameters: BorrarClasePorIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.borrarClasePorIdRaw(requestParameters, initOverrides);
	}

	/**
	 * Elimina una clase por su título
	 * Eliminar clase por título
	 */
	async borrarClasePorTituloRaw(
		requestParameters: BorrarClasePorTituloRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters['titulo'] == null) {
			throw new runtime.RequiredError(
				'titulo',
				'Required parameter "titulo" was null or undefined when calling borrarClasePorTitulo().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/titulo/{titulo}`;
		urlPath = urlPath.replace(
			`{${'titulo'}}`,
			encodeURIComponent(String(requestParameters['titulo']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Elimina una clase por su título
	 * Eliminar clase por título
	 */
	async borrarClasePorTitulo(
		requestParameters: BorrarClasePorTituloRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.borrarClasePorTituloRaw(requestParameters, initOverrides);
	}

	/**
	 * Busca clases con paginación y filtros avanzados
	 * Buscar clases con filtros
	 */
	async buscarClasesRaw(
		requestParameters: BuscarClasesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTORespuestaPaginadaDTOClase>> {
		if (requestParameters['dTOParametrosBusquedaClase'] == null) {
			throw new runtime.RequiredError(
				'dTOParametrosBusquedaClase',
				'Required parameter "dTOParametrosBusquedaClase" was null or undefined when calling buscarClases().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/api/clases/buscar`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: DTOParametrosBusquedaClaseToJSON(requestParameters['dTOParametrosBusquedaClase'])
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) =>
			DTORespuestaPaginadaDTOClaseFromJSON(jsonValue)
		);
	}

	/**
	 * Busca clases con paginación y filtros avanzados
	 * Buscar clases con filtros
	 */
	async buscarClases(
		requestParameters: BuscarClasesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTORespuestaPaginadaDTOClase> {
		const response = await this.buscarClasesRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Busca clases con término general en título y descripción
	 * Buscar clases con término general
	 */
	async buscarClasesPorTerminoGeneralRaw(
		requestParameters: BuscarClasesPorTerminoGeneralRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOClase>>> {
		if (requestParameters['q'] == null) {
			throw new runtime.RequiredError(
				'q',
				'Required parameter "q" was null or undefined when calling buscarClasesPorTerminoGeneral().'
			);
		}

		const queryParameters: any = {};

		if (requestParameters['q'] != null) {
			queryParameters['q'] = requestParameters['q'];
		}

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/buscar/general`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOClaseFromJSON));
	}

	/**
	 * Busca clases con término general en título y descripción
	 * Buscar clases con término general
	 */
	async buscarClasesPorTerminoGeneral(
		requestParameters: BuscarClasesPorTerminoGeneralRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOClase>> {
		const response = await this.buscarClasesPorTerminoGeneralRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Busca clases por título filtradas según el rol
	 * Buscar clases por título
	 */
	async buscarClasesPorTituloRaw(
		requestParameters: BuscarClasesPorTituloRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOClase>>> {
		if (requestParameters['titulo'] == null) {
			throw new runtime.RequiredError(
				'titulo',
				'Required parameter "titulo" was null or undefined when calling buscarClasesPorTitulo().'
			);
		}

		const queryParameters: any = {};

		if (requestParameters['titulo'] != null) {
			queryParameters['titulo'] = requestParameters['titulo'];
		}

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/buscar`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOClaseFromJSON));
	}

	/**
	 * Busca clases por título filtradas según el rol
	 * Buscar clases por título
	 */
	async buscarClasesPorTitulo(
		requestParameters: BuscarClasesPorTituloRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOClase>> {
		const response = await this.buscarClasesPorTituloRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene el número de alumnos inscritos en una clase
	 * Contar alumnos en clase
	 */
	async contarAlumnosEnClaseRaw(
		requestParameters: ContarAlumnosEnClaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<number>> {
		if (requestParameters['claseId'] == null) {
			throw new runtime.RequiredError(
				'claseId',
				'Required parameter "claseId" was null or undefined when calling contarAlumnosEnClase().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/{claseId}/alumnos/contar`;
		urlPath = urlPath.replace(
			`{${'claseId'}}`,
			encodeURIComponent(String(requestParameters['claseId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		if (this.isJsonMime(response.headers.get('content-type'))) {
			return new runtime.JSONApiResponse<number>(response);
		} else {
			return new runtime.TextApiResponse(response) as any;
		}
	}

	/**
	 * Obtiene el número de alumnos inscritos en una clase
	 * Contar alumnos en clase
	 */
	async contarAlumnosEnClase(
		requestParameters: ContarAlumnosEnClaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<number> {
		const response = await this.contarAlumnosEnClaseRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene el número de profesores de una clase
	 * Contar profesores en clase
	 */
	async contarProfesoresEnClaseRaw(
		requestParameters: ContarProfesoresEnClaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<number>> {
		if (requestParameters['claseId'] == null) {
			throw new runtime.RequiredError(
				'claseId',
				'Required parameter "claseId" was null or undefined when calling contarProfesoresEnClase().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/{claseId}/profesores/contar`;
		urlPath = urlPath.replace(
			`{${'claseId'}}`,
			encodeURIComponent(String(requestParameters['claseId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		if (this.isJsonMime(response.headers.get('content-type'))) {
			return new runtime.JSONApiResponse<number>(response);
		} else {
			return new runtime.TextApiResponse(response) as any;
		}
	}

	/**
	 * Obtiene el número de profesores de una clase
	 * Contar profesores en clase
	 */
	async contarProfesoresEnClase(
		requestParameters: ContarProfesoresEnClaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<number> {
		const response = await this.contarProfesoresEnClaseRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Crea un nuevo curso
	 * Crear curso
	 */
	async crearCursoRaw(
		requestParameters: CrearCursoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOCurso>> {
		if (requestParameters['dTOPeticionCrearCurso'] == null) {
			throw new runtime.RequiredError(
				'dTOPeticionCrearCurso',
				'Required parameter "dTOPeticionCrearCurso" was null or undefined when calling crearCurso().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/api/clases/cursos`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: DTOPeticionCrearCursoToJSON(requestParameters['dTOPeticionCrearCurso'])
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOCursoFromJSON(jsonValue));
	}

	/**
	 * Crea un nuevo curso
	 * Crear curso
	 */
	async crearCurso(
		requestParameters: CrearCursoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOCurso> {
		const response = await this.crearCursoRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Crea un nuevo taller
	 * Crear taller
	 */
	async crearTallerRaw(
		requestParameters: CrearTallerRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOTaller>> {
		if (requestParameters['dTOPeticionCrearTaller'] == null) {
			throw new runtime.RequiredError(
				'dTOPeticionCrearTaller',
				'Required parameter "dTOPeticionCrearTaller" was null or undefined when calling crearTaller().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/api/clases/talleres`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: DTOPeticionCrearTallerToJSON(requestParameters['dTOPeticionCrearTaller'])
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOTallerFromJSON(jsonValue));
	}

	/**
	 * Crea un nuevo taller
	 * Crear taller
	 */
	async crearTaller(
		requestParameters: CrearTallerRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOTaller> {
		const response = await this.crearTallerRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene una clase específica por su ID
	 * Obtener clase por ID
	 */
	async obtenerClasePorIdRaw(
		requestParameters: ObtenerClasePorIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOClase>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling obtenerClasePorId().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/{id}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
	}

	/**
	 * Obtiene una clase específica por su ID
	 * Obtener clase por ID
	 */
	async obtenerClasePorId(
		requestParameters: ObtenerClasePorIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOClase> {
		const response = await this.obtenerClasePorIdRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene una clase específica por su título
	 * Obtener clase por título
	 */
	async obtenerClasePorTituloRaw(
		requestParameters: ObtenerClasePorTituloRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<DTOClase>> {
		if (requestParameters['titulo'] == null) {
			throw new runtime.RequiredError(
				'titulo',
				'Required parameter "titulo" was null or undefined when calling obtenerClasePorTitulo().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/titulo/{titulo}`;
		urlPath = urlPath.replace(
			`{${'titulo'}}`,
			encodeURIComponent(String(requestParameters['titulo']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
	}

	/**
	 * Obtiene una clase específica por su título
	 * Obtener clase por título
	 */
	async obtenerClasePorTitulo(
		requestParameters: ObtenerClasePorTituloRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<DTOClase> {
		const response = await this.obtenerClasePorTituloRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene clases filtradas según el rol del usuario
	 * Obtener clases
	 */
	async obtenerClasesRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOClase>>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOClaseFromJSON));
	}

	/**
	 * Obtiene clases filtradas según el rol del usuario
	 * Obtener clases
	 */
	async obtenerClases(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOClase>> {
		const response = await this.obtenerClasesRaw(initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene todas las clases de un alumno específico
	 * Obtener clases por alumno
	 */
	async obtenerClasesPorAlumnoRaw(
		requestParameters: ObtenerClasesPorAlumnoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOClase>>> {
		if (requestParameters['alumnoId'] == null) {
			throw new runtime.RequiredError(
				'alumnoId',
				'Required parameter "alumnoId" was null or undefined when calling obtenerClasesPorAlumno().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/alumno/{alumnoId}`;
		urlPath = urlPath.replace(
			`{${'alumnoId'}}`,
			encodeURIComponent(String(requestParameters['alumnoId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOClaseFromJSON));
	}

	/**
	 * Obtiene todas las clases de un alumno específico
	 * Obtener clases por alumno
	 */
	async obtenerClasesPorAlumno(
		requestParameters: ObtenerClasesPorAlumnoRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOClase>> {
		const response = await this.obtenerClasesPorAlumnoRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Obtiene todas las clases de un profesor específico
	 * Obtener clases por profesor
	 */
	async obtenerClasesPorProfesorRaw(
		requestParameters: ObtenerClasesPorProfesorRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<DTOClase>>> {
		if (requestParameters['profesorId'] == null) {
			throw new runtime.RequiredError(
				'profesorId',
				'Required parameter "profesorId" was null or undefined when calling obtenerClasesPorProfesor().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/api/clases/profesor/{profesorId}`;
		urlPath = urlPath.replace(
			`{${'profesorId'}}`,
			encodeURIComponent(String(requestParameters['profesorId']))
		);

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DTOClaseFromJSON));
	}

	/**
	 * Obtiene todas las clases de un profesor específico
	 * Obtener clases por profesor
	 */
	async obtenerClasesPorProfesor(
		requestParameters: ObtenerClasesPorProfesorRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<DTOClase>> {
		const response = await this.obtenerClasesPorProfesorRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
