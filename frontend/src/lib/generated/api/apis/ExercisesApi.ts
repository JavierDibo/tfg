/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DTOEjercicio,
  DTOEntregaEjercicio,
  DTOPeticionCrearEjercicio,
  DTORespuestaPaginada,
  DTORespuestaPaginadaDTOEjercicio,
  DTORespuestaPaginadaDTOEjercicioConEntrega,
} from '../models/index';
import {
    DTOEjercicioFromJSON,
    DTOEjercicioToJSON,
    DTOEntregaEjercicioFromJSON,
    DTOEntregaEjercicioToJSON,
    DTOPeticionCrearEjercicioFromJSON,
    DTOPeticionCrearEjercicioToJSON,
    DTORespuestaPaginadaFromJSON,
    DTORespuestaPaginadaToJSON,
    DTORespuestaPaginadaDTOEjercicioFromJSON,
    DTORespuestaPaginadaDTOEjercicioToJSON,
    DTORespuestaPaginadaDTOEjercicioConEntregaFromJSON,
    DTORespuestaPaginadaDTOEjercicioConEntregaToJSON,
} from '../models/index';

export interface ActualizarEjercicioParcialRequest {
    id: number;
    dTOPeticionCrearEjercicio: DTOPeticionCrearEjercicio;
}

export interface CrearEjercicioRequest {
    dTOPeticionCrearEjercicio: DTOPeticionCrearEjercicio;
}

export interface EliminarEjercicioRequest {
    id: number;
}

export interface ObtenerEjercicioCompletoRequest {
    id: number;
}

export interface ObtenerEjercicioConClaseRequest {
    id: number;
}

export interface ObtenerEjercicioConEntregasRequest {
    id: number;
}

export interface ObtenerEjercicioPorIdRequest {
    id: number;
}

export interface ObtenerEjerciciosRequest {
    q?: string;
    name?: string;
    statement?: string;
    classId?: string;
    status?: string;
    page?: number;
    size?: number;
    sortBy?: string;
    sortDirection?: string;
}

export interface ObtenerEjerciciosConEntregaRequest {
    q?: string;
    name?: string;
    statement?: string;
    classId?: string;
    status?: string;
    page?: number;
    size?: number;
    sortBy?: string;
    sortDirection?: string;
}

export interface ObtenerEjerciciosConEntregasPorClaseRequest {
    claseId: number;
}

export interface ObtenerEntregasEjercicioRequest {
    id: number;
}

export interface ObtenerEstadisticasEjercicioRequest {
    id: number;
}

export interface ReemplazarEjercicioRequest {
    id: number;
    dTOPeticionCrearEjercicio: DTOPeticionCrearEjercicio;
}

/**
 * 
 */
export class ExercisesApi extends runtime.BaseAPI {

    /**
     * Partially updates an existing exercise (requires ADMIN or PROFESOR role)
     * Update exercise partially
     */
    async actualizarEjercicioParcialRaw(requestParameters: ActualizarEjercicioParcialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEjercicio>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling actualizarEjercicioParcial().'
            );
        }

        if (requestParameters['dTOPeticionCrearEjercicio'] == null) {
            throw new runtime.RequiredError(
                'dTOPeticionCrearEjercicio',
                'Required parameter "dTOPeticionCrearEjercicio" was null or undefined when calling actualizarEjercicioParcial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/ejercicios/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DTOPeticionCrearEjercicioToJSON(requestParameters['dTOPeticionCrearEjercicio']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEjercicioFromJSON(jsonValue));
    }

    /**
     * Partially updates an existing exercise (requires ADMIN or PROFESOR role)
     * Update exercise partially
     */
    async actualizarEjercicioParcial(requestParameters: ActualizarEjercicioParcialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEjercicio> {
        const response = await this.actualizarEjercicioParcialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the total count of exercises in the system
     * Get exercise count
     */
    async contarEjerciciosRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ejercicios/count`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Gets the total count of exercises in the system
     * Get exercise count
     */
    async contarEjercicios(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.contarEjerciciosRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates a new exercise in the system (requires ADMIN or PROFESOR role)
     * Create new exercise
     */
    async crearEjercicioRaw(requestParameters: CrearEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEjercicio>> {
        if (requestParameters['dTOPeticionCrearEjercicio'] == null) {
            throw new runtime.RequiredError(
                'dTOPeticionCrearEjercicio',
                'Required parameter "dTOPeticionCrearEjercicio" was null or undefined when calling crearEjercicio().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/ejercicios`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DTOPeticionCrearEjercicioToJSON(requestParameters['dTOPeticionCrearEjercicio']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEjercicioFromJSON(jsonValue));
    }

    /**
     * Creates a new exercise in the system (requires ADMIN or PROFESOR role)
     * Create new exercise
     */
    async crearEjercicio(requestParameters: CrearEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEjercicio> {
        const response = await this.crearEjercicioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an exercise from the system (requires ADMIN or PROFESOR role)
     * Delete exercise
     */
    async eliminarEjercicioRaw(requestParameters: EliminarEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eliminarEjercicio().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ejercicios/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an exercise from the system (requires ADMIN or PROFESOR role)
     * Delete exercise
     */
    async eliminarEjercicio(requestParameters: EliminarEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eliminarEjercicioRaw(requestParameters, initOverrides);
    }

    /**
     * Gets an exercise with all its relationships (class and deliveries) loaded using Entity Graph
     * Get exercise with all relationships
     */
    async obtenerEjercicioCompletoRaw(requestParameters: ObtenerEjercicioCompletoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEjercicio>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerEjercicioCompleto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ejercicios/{id}/completo`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEjercicioFromJSON(jsonValue));
    }

    /**
     * Gets an exercise with all its relationships (class and deliveries) loaded using Entity Graph
     * Get exercise with all relationships
     */
    async obtenerEjercicioCompleto(requestParameters: ObtenerEjercicioCompletoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEjercicio> {
        const response = await this.obtenerEjercicioCompletoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an exercise with its class loaded using Entity Graph for optimal performance
     * Get exercise with class
     */
    async obtenerEjercicioConClaseRaw(requestParameters: ObtenerEjercicioConClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEjercicio>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerEjercicioConClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ejercicios/{id}/con-clase`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEjercicioFromJSON(jsonValue));
    }

    /**
     * Gets an exercise with its class loaded using Entity Graph for optimal performance
     * Get exercise with class
     */
    async obtenerEjercicioConClase(requestParameters: ObtenerEjercicioConClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEjercicio> {
        const response = await this.obtenerEjercicioConClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an exercise with its deliveries loaded using Entity Graph for optimal performance
     * Get exercise with deliveries
     */
    async obtenerEjercicioConEntregasRaw(requestParameters: ObtenerEjercicioConEntregasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEjercicio>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerEjercicioConEntregas().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ejercicios/{id}/con-entregas`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEjercicioFromJSON(jsonValue));
    }

    /**
     * Gets an exercise with its deliveries loaded using Entity Graph for optimal performance
     * Get exercise with deliveries
     */
    async obtenerEjercicioConEntregas(requestParameters: ObtenerEjercicioConEntregasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEjercicio> {
        const response = await this.obtenerEjercicioConEntregasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a specific exercise by its ID.
     * Get exercise by ID
     */
    async obtenerEjercicioPorIdRaw(requestParameters: ObtenerEjercicioPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEjercicio>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerEjercicioPorId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ejercicios/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEjercicioFromJSON(jsonValue));
    }

    /**
     * Gets a specific exercise by its ID.
     * Get exercise by ID
     */
    async obtenerEjercicioPorId(requestParameters: ObtenerEjercicioPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEjercicio> {
        const response = await this.obtenerEjercicioPorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a paginated list of exercises with optional filters.
     * Get paginated exercises
     */
    async obtenerEjerciciosRaw(requestParameters: ObtenerEjerciciosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaPaginada>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['statement'] != null) {
            queryParameters['statement'] = requestParameters['statement'];
        }

        if (requestParameters['classId'] != null) {
            queryParameters['classId'] = requestParameters['classId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDirection'] != null) {
            queryParameters['sortDirection'] = requestParameters['sortDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ejercicios`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaPaginadaFromJSON(jsonValue));
    }

    /**
     * Gets a paginated list of exercises with optional filters.
     * Get paginated exercises
     */
    async obtenerEjercicios(requestParameters: ObtenerEjerciciosRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaPaginada> {
        const response = await this.obtenerEjerciciosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a paginated list of exercises with delivery status information for the current student.
     * Get exercises with delivery information
     */
    async obtenerEjerciciosConEntregaRaw(requestParameters: ObtenerEjerciciosConEntregaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaPaginada>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['statement'] != null) {
            queryParameters['statement'] = requestParameters['statement'];
        }

        if (requestParameters['classId'] != null) {
            queryParameters['classId'] = requestParameters['classId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDirection'] != null) {
            queryParameters['sortDirection'] = requestParameters['sortDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ejercicios/with-delivery`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaPaginadaFromJSON(jsonValue));
    }

    /**
     * Gets a paginated list of exercises with delivery status information for the current student.
     * Get exercises with delivery information
     */
    async obtenerEjerciciosConEntrega(requestParameters: ObtenerEjerciciosConEntregaRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaPaginada> {
        const response = await this.obtenerEjerciciosConEntregaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets exercises for a specific class with their deliveries loaded using Entity Graph
     * Get exercises by class with deliveries
     */
    async obtenerEjerciciosConEntregasPorClaseRaw(requestParameters: ObtenerEjerciciosConEntregasPorClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling obtenerEjerciciosConEntregasPorClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ejercicios/clase/{claseId}/con-entregas`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Gets exercises for a specific class with their deliveries loaded using Entity Graph
     * Get exercises by class with deliveries
     */
    async obtenerEjerciciosConEntregasPorClase(requestParameters: ObtenerEjerciciosConEntregasPorClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.obtenerEjerciciosConEntregasPorClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all deliveries for a specific exercise (requires ADMIN or PROFESOR role)
     * Get exercise deliveries
     */
    async obtenerEntregasEjercicioRaw(requestParameters: ObtenerEntregasEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEntregaEjercicio>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerEntregasEjercicio().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ejercicios/{id}/entregas`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEntregaEjercicioFromJSON(jsonValue));
    }

    /**
     * Gets all deliveries for a specific exercise (requires ADMIN or PROFESOR role)
     * Get exercise deliveries
     */
    async obtenerEntregasEjercicio(requestParameters: ObtenerEntregasEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEntregaEjercicio> {
        const response = await this.obtenerEntregasEjercicioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets statistics about an exercise (requires ADMIN or PROFESOR role)
     * Get exercise statistics
     */
    async obtenerEstadisticasEjercicioRaw(requestParameters: ObtenerEstadisticasEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerEstadisticasEjercicio().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ejercicios/{id}/estadisticas`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets statistics about an exercise (requires ADMIN or PROFESOR role)
     * Get exercise statistics
     */
    async obtenerEstadisticasEjercicio(requestParameters: ObtenerEstadisticasEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.obtenerEstadisticasEjercicioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets statistics about all exercises (requires ADMIN or PROFESOR role)
     * Get all exercises statistics
     */
    async obtenerEstadisticasGeneralesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ejercicios/estadisticas`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets statistics about all exercises (requires ADMIN or PROFESOR role)
     * Get all exercises statistics
     */
    async obtenerEstadisticasGenerales(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.obtenerEstadisticasGeneralesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Replaces an entire exercise record (requires ADMIN or PROFESOR role)
     * Replace exercise
     */
    async reemplazarEjercicioRaw(requestParameters: ReemplazarEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEjercicio>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling reemplazarEjercicio().'
            );
        }

        if (requestParameters['dTOPeticionCrearEjercicio'] == null) {
            throw new runtime.RequiredError(
                'dTOPeticionCrearEjercicio',
                'Required parameter "dTOPeticionCrearEjercicio" was null or undefined when calling reemplazarEjercicio().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/ejercicios/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DTOPeticionCrearEjercicioToJSON(requestParameters['dTOPeticionCrearEjercicio']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEjercicioFromJSON(jsonValue));
    }

    /**
     * Replaces an entire exercise record (requires ADMIN or PROFESOR role)
     * Replace exercise
     */
    async reemplazarEjercicio(requestParameters: ReemplazarEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEjercicio> {
        const response = await this.reemplazarEjercicioRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
