/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gestión de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DTOEntidad,
} from '../models/index';
import {
    DTOEntidadFromJSON,
    DTOEntidadToJSON,
} from '../models/index';

export interface ActualizarEntidadRequest {
    id: number;
    dTOEntidad: DTOEntidad;
}

export interface BorrarEntidadPorIdRequest {
    id: number;
}

export interface CrearEntidadRequest {
    dTOEntidad: DTOEntidad;
}

export interface ObtenerEntidadPorIdRequest {
    id: number;
}

export interface ObtenerEntidadesRequest {
    info?: string;
    otraInfo?: string;
}

/**
 * 
 */
export class EntidadesApi extends runtime.BaseAPI {

    /**
     * Actualiza parcialmente una entidad existente
     * Actualizar entidad
     */
    async actualizarEntidadRaw(requestParameters: ActualizarEntidadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEntidad>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling actualizarEntidad().'
            );
        }

        if (requestParameters['dTOEntidad'] == null) {
            throw new runtime.RequiredError(
                'dTOEntidad',
                'Required parameter "dTOEntidad" was null or undefined when calling actualizarEntidad().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/entidades/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DTOEntidadToJSON(requestParameters['dTOEntidad']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEntidadFromJSON(jsonValue));
    }

    /**
     * Actualiza parcialmente una entidad existente
     * Actualizar entidad
     */
    async actualizarEntidad(requestParameters: ActualizarEntidadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEntidad> {
        const response = await this.actualizarEntidadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Elimina una entidad específica por su identificador
     * Borrar entidad por ID
     */
    async borrarEntidadPorIdRaw(requestParameters: BorrarEntidadPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEntidad>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling borrarEntidadPorId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/entidades/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEntidadFromJSON(jsonValue));
    }

    /**
     * Elimina una entidad específica por su identificador
     * Borrar entidad por ID
     */
    async borrarEntidadPorId(requestParameters: BorrarEntidadPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEntidad> {
        const response = await this.borrarEntidadPorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Elimina todas las entidades del sistema (requiere rol ADMIN)
     * Borrar todas las entidades
     */
    async borrarTodasLasEntidadesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEntidad>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/entidades`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEntidadFromJSON(jsonValue));
    }

    /**
     * Elimina todas las entidades del sistema (requiere rol ADMIN)
     * Borrar todas las entidades
     */
    async borrarTodasLasEntidades(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEntidad> {
        const response = await this.borrarTodasLasEntidadesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Crea una nueva entidad en el sistema
     * Crear nueva entidad
     */
    async crearEntidadRaw(requestParameters: CrearEntidadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEntidad>> {
        if (requestParameters['dTOEntidad'] == null) {
            throw new runtime.RequiredError(
                'dTOEntidad',
                'Required parameter "dTOEntidad" was null or undefined when calling crearEntidad().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/entidades`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DTOEntidadToJSON(requestParameters['dTOEntidad']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEntidadFromJSON(jsonValue));
    }

    /**
     * Crea una nueva entidad en el sistema
     * Crear nueva entidad
     */
    async crearEntidad(requestParameters: CrearEntidadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEntidad> {
        const response = await this.crearEntidadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Obtiene una entidad específica por su identificador
     * Obtener entidad por ID
     */
    async obtenerEntidadPorIdRaw(requestParameters: ObtenerEntidadPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEntidad>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling obtenerEntidadPorId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/entidades/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEntidadFromJSON(jsonValue));
    }

    /**
     * Obtiene una entidad específica por su identificador
     * Obtener entidad por ID
     */
    async obtenerEntidadPorId(requestParameters: ObtenerEntidadPorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEntidad> {
        const response = await this.obtenerEntidadPorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Obtiene todas las entidades o las filtra por parámetros de búsqueda
     * Obtener entidades
     */
    async obtenerEntidadesRaw(requestParameters: ObtenerEntidadesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEntidad>> {
        const queryParameters: any = {};

        if (requestParameters['info'] != null) {
            queryParameters['info'] = requestParameters['info'];
        }

        if (requestParameters['otraInfo'] != null) {
            queryParameters['otraInfo'] = requestParameters['otraInfo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/entidades`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEntidadFromJSON(jsonValue));
    }

    /**
     * Obtiene todas las entidades o las filtra por parámetros de búsqueda
     * Obtener entidades
     */
    async obtenerEntidades(requestParameters: ObtenerEntidadesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEntidad> {
        const response = await this.obtenerEntidadesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
