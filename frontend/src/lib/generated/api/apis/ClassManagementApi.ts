/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DTOClase,
  DTOClaseConDetallesPublico,
  DTOEstadoInscripcion,
  DTORespuestaEnrollment,
  Material,
} from '../models/index';
import {
    DTOClaseFromJSON,
    DTOClaseToJSON,
    DTOClaseConDetallesPublicoFromJSON,
    DTOClaseConDetallesPublicoToJSON,
    DTOEstadoInscripcionFromJSON,
    DTOEstadoInscripcionToJSON,
    DTORespuestaEnrollmentFromJSON,
    DTORespuestaEnrollmentToJSON,
    MaterialFromJSON,
    MaterialToJSON,
} from '../models/index';

export interface AgregarEjercicioRequest {
    claseId: number;
    ejercicioId: string;
}

export interface AgregarMaterialRequest {
    claseId: number;
    material: Material;
}

export interface AgregarProfesorRequest {
    claseId: number;
    profesorId: string;
}

export interface DarDeBajaAlumnoDeClaseRequest {
    claseId: number;
    studentId: number;
}

export interface DarseDeBajaDeClaseRequest {
    claseId: number;
}

export interface InscribirAlumnoEnClaseRequest {
    claseId: number;
    studentId: number;
}

export interface InscribirseEnClaseRequest {
    claseId: number;
}

export interface ObtenerMiInscripcionRequest {
    claseId: number;
}

export interface ObtenerMisDetallesClaseRequest {
    claseId: number;
}

export interface RemoverEjercicioRequest {
    claseId: number;
    ejercicioId: string;
}

export interface RemoverMaterialRequest {
    claseId: number;
    materialId: string;
}

export interface RemoverProfesorRequest {
    claseId: number;
    profesorId: string;
}

/**
 * 
 */
export class ClassManagementApi extends runtime.BaseAPI {

    /**
     * Adds an exercise to a specific class
     * Add exercise to class
     */
    async agregarEjercicioRaw(requestParameters: AgregarEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling agregarEjercicio().'
            );
        }

        if (requestParameters['ejercicioId'] == null) {
            throw new runtime.RequiredError(
                'ejercicioId',
                'Required parameter "ejercicioId" was null or undefined when calling agregarEjercicio().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/ejercicios/{ejercicioId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"ejercicioId"}}`, encodeURIComponent(String(requestParameters['ejercicioId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     * Adds an exercise to a specific class
     * Add exercise to class
     */
    async agregarEjercicio(requestParameters: AgregarEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.agregarEjercicioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds material to a specific class
     * Add material to class
     */
    async agregarMaterialRaw(requestParameters: AgregarMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling agregarMaterial().'
            );
        }

        if (requestParameters['material'] == null) {
            throw new runtime.RequiredError(
                'material',
                'Required parameter "material" was null or undefined when calling agregarMaterial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/clases/{claseId}/material`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MaterialToJSON(requestParameters['material']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     * Adds material to a specific class
     * Add material to class
     */
    async agregarMaterial(requestParameters: AgregarMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.agregarMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a professor to a specific class
     * Add professor to class
     */
    async agregarProfesorRaw(requestParameters: AgregarProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling agregarProfesor().'
            );
        }

        if (requestParameters['profesorId'] == null) {
            throw new runtime.RequiredError(
                'profesorId',
                'Required parameter "profesorId" was null or undefined when calling agregarProfesor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/profesores/{profesorId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"profesorId"}}`, encodeURIComponent(String(requestParameters['profesorId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     * Adds a professor to a specific class
     * Add professor to class
     */
    async agregarProfesor(requestParameters: AgregarProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.agregarProfesorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unenrolls a student from a specific class
     * Unenroll student from class
     */
    async darDeBajaAlumnoDeClaseRaw(requestParameters: DarDeBajaAlumnoDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaEnrollment>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling darDeBajaAlumnoDeClase().'
            );
        }

        if (requestParameters['studentId'] == null) {
            throw new runtime.RequiredError(
                'studentId',
                'Required parameter "studentId" was null or undefined when calling darDeBajaAlumnoDeClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/students/{studentId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"studentId"}}`, encodeURIComponent(String(requestParameters['studentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaEnrollmentFromJSON(jsonValue));
    }

    /**
     * Unenrolls a student from a specific class
     * Unenroll student from class
     */
    async darDeBajaAlumnoDeClase(requestParameters: DarDeBajaAlumnoDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaEnrollment> {
        const response = await this.darDeBajaAlumnoDeClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows a student to unenroll themselves from a class
     * Self-unenrollment from class
     */
    async darseDeBajaDeClaseRaw(requestParameters: DarseDeBajaDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaEnrollment>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling darseDeBajaDeClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/students/me`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaEnrollmentFromJSON(jsonValue));
    }

    /**
     * Allows a student to unenroll themselves from a class
     * Self-unenrollment from class
     */
    async darseDeBajaDeClase(requestParameters: DarseDeBajaDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaEnrollment> {
        const response = await this.darseDeBajaDeClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enrolls a student in a specific class
     * Enroll student in class
     */
    async inscribirAlumnoEnClaseRaw(requestParameters: InscribirAlumnoEnClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaEnrollment>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling inscribirAlumnoEnClase().'
            );
        }

        if (requestParameters['studentId'] == null) {
            throw new runtime.RequiredError(
                'studentId',
                'Required parameter "studentId" was null or undefined when calling inscribirAlumnoEnClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/students/{studentId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"studentId"}}`, encodeURIComponent(String(requestParameters['studentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaEnrollmentFromJSON(jsonValue));
    }

    /**
     * Enrolls a student in a specific class
     * Enroll student in class
     */
    async inscribirAlumnoEnClase(requestParameters: InscribirAlumnoEnClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaEnrollment> {
        const response = await this.inscribirAlumnoEnClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows a student to enroll themselves in a class
     * Self-enrollment in class
     */
    async inscribirseEnClaseRaw(requestParameters: InscribirseEnClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaEnrollment>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling inscribirseEnClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/students/me`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaEnrollmentFromJSON(jsonValue));
    }

    /**
     * Allows a student to enroll themselves in a class
     * Self-enrollment in class
     */
    async inscribirseEnClase(requestParameters: InscribirseEnClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaEnrollment> {
        const response = await this.inscribirseEnClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the enrollment information of the authenticated student in a class
     * Get my enrollment in class
     */
    async obtenerMiInscripcionRaw(requestParameters: ObtenerMiInscripcionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOEstadoInscripcion>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling obtenerMiInscripcion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/students/me`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOEstadoInscripcionFromJSON(jsonValue));
    }

    /**
     * Gets the enrollment information of the authenticated student in a class
     * Get my enrollment in class
     */
    async obtenerMiInscripcion(requestParameters: ObtenerMiInscripcionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOEstadoInscripcion> {
        const response = await this.obtenerMiInscripcionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets detailed information about a class for the authenticated student
     * Get class details for me
     */
    async obtenerMisDetallesClaseRaw(requestParameters: ObtenerMisDetallesClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClaseConDetallesPublico>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling obtenerMisDetallesClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/students/me/details`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseConDetallesPublicoFromJSON(jsonValue));
    }

    /**
     * Gets detailed information about a class for the authenticated student
     * Get class details for me
     */
    async obtenerMisDetallesClase(requestParameters: ObtenerMisDetallesClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClaseConDetallesPublico> {
        const response = await this.obtenerMisDetallesClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes an exercise from a specific class
     * Remove exercise from class
     */
    async removerEjercicioRaw(requestParameters: RemoverEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling removerEjercicio().'
            );
        }

        if (requestParameters['ejercicioId'] == null) {
            throw new runtime.RequiredError(
                'ejercicioId',
                'Required parameter "ejercicioId" was null or undefined when calling removerEjercicio().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/ejercicios/{ejercicioId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"ejercicioId"}}`, encodeURIComponent(String(requestParameters['ejercicioId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     * Removes an exercise from a specific class
     * Remove exercise from class
     */
    async removerEjercicio(requestParameters: RemoverEjercicioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.removerEjercicioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes material from a specific class
     * Remove material from class
     */
    async removerMaterialRaw(requestParameters: RemoverMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling removerMaterial().'
            );
        }

        if (requestParameters['materialId'] == null) {
            throw new runtime.RequiredError(
                'materialId',
                'Required parameter "materialId" was null or undefined when calling removerMaterial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/material/{materialId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"materialId"}}`, encodeURIComponent(String(requestParameters['materialId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     * Removes material from a specific class
     * Remove material from class
     */
    async removerMaterial(requestParameters: RemoverMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.removerMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a professor from a specific class
     * Remove professor from class
     */
    async removerProfesorRaw(requestParameters: RemoverProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTOClase>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling removerProfesor().'
            );
        }

        if (requestParameters['profesorId'] == null) {
            throw new runtime.RequiredError(
                'profesorId',
                'Required parameter "profesorId" was null or undefined when calling removerProfesor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/profesores/{profesorId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"profesorId"}}`, encodeURIComponent(String(requestParameters['profesorId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTOClaseFromJSON(jsonValue));
    }

    /**
     * Removes a professor from a specific class
     * Remove professor from class
     */
    async removerProfesor(requestParameters: RemoverProfesorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTOClase> {
        const response = await this.removerProfesorRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
