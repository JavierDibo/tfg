/* tslint:disable */
/* eslint-disable */
/**
 * Academia API
 * API para gesti√≥n de academia con roles de administrador, profesor y alumno
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@academia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DTORespuestaEnrollment,
  Material,
} from '../models/index';
import {
    DTORespuestaEnrollmentFromJSON,
    DTORespuestaEnrollmentToJSON,
    MaterialFromJSON,
    MaterialToJSON,
} from '../models/index';

export interface AgregarMaterialAClaseRequest {
    claseId: number;
    material: Material;
}

export interface AgregarProfesorAClaseRequest {
    claseId: number;
    professorId: number;
}

export interface DarDeBajaAlumnoDeClaseRequest {
    claseId: number;
    studentId: number;
}

export interface InscribirAlumnoEnClaseRequest {
    claseId: number;
    studentId: number;
}

export interface ObtenerMaterialesClaseRequest {
    claseId: number;
}

export interface QuitarMaterialDeClaseRequest {
    claseId: number;
    materialId: number;
}

export interface QuitarProfesorDeClaseRequest {
    claseId: number;
    professorId: number;
}

/**
 * 
 */
export class ClassManagementApi extends runtime.BaseAPI {

    /**
     * Adds educational material to a specific class
     * Add material to class
     */
    async agregarMaterialAClaseRaw(requestParameters: AgregarMaterialAClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling agregarMaterialAClase().'
            );
        }

        if (requestParameters['material'] == null) {
            throw new runtime.RequiredError(
                'material',
                'Required parameter "material" was null or undefined when calling agregarMaterialAClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/clases/{claseId}/materials`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MaterialToJSON(requestParameters['material']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Adds educational material to a specific class
     * Add material to class
     */
    async agregarMaterialAClase(requestParameters: AgregarMaterialAClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.agregarMaterialAClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a professor to a specific class
     * Add professor to class
     */
    async agregarProfesorAClaseRaw(requestParameters: AgregarProfesorAClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling agregarProfesorAClase().'
            );
        }

        if (requestParameters['professorId'] == null) {
            throw new runtime.RequiredError(
                'professorId',
                'Required parameter "professorId" was null or undefined when calling agregarProfesorAClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/professors/{professorId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"professorId"}}`, encodeURIComponent(String(requestParameters['professorId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Adds a professor to a specific class
     * Add professor to class
     */
    async agregarProfesorAClase(requestParameters: AgregarProfesorAClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.agregarProfesorAClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unenrolls a student from a specific class. Only administrators can perform this operation.
     * Unenroll student from class (Admin only)
     */
    async darDeBajaAlumnoDeClaseRaw(requestParameters: DarDeBajaAlumnoDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaEnrollment>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling darDeBajaAlumnoDeClase().'
            );
        }

        if (requestParameters['studentId'] == null) {
            throw new runtime.RequiredError(
                'studentId',
                'Required parameter "studentId" was null or undefined when calling darDeBajaAlumnoDeClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/students/{studentId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"studentId"}}`, encodeURIComponent(String(requestParameters['studentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaEnrollmentFromJSON(jsonValue));
    }

    /**
     * Unenrolls a student from a specific class. Only administrators can perform this operation.
     * Unenroll student from class (Admin only)
     */
    async darDeBajaAlumnoDeClase(requestParameters: DarDeBajaAlumnoDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaEnrollment> {
        const response = await this.darDeBajaAlumnoDeClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enrolls a student in a specific class
     * Enroll student in class
     */
    async inscribirAlumnoEnClaseRaw(requestParameters: InscribirAlumnoEnClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DTORespuestaEnrollment>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling inscribirAlumnoEnClase().'
            );
        }

        if (requestParameters['studentId'] == null) {
            throw new runtime.RequiredError(
                'studentId',
                'Required parameter "studentId" was null or undefined when calling inscribirAlumnoEnClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/students/{studentId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"studentId"}}`, encodeURIComponent(String(requestParameters['studentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DTORespuestaEnrollmentFromJSON(jsonValue));
    }

    /**
     * Enrolls a student in a specific class
     * Enroll student in class
     */
    async inscribirAlumnoEnClase(requestParameters: InscribirAlumnoEnClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DTORespuestaEnrollment> {
        const response = await this.inscribirAlumnoEnClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all materials for a specific class
     * Get class materials
     */
    async obtenerMaterialesClaseRaw(requestParameters: ObtenerMaterialesClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Material>>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling obtenerMaterialesClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/materials`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MaterialFromJSON));
    }

    /**
     * Gets all materials for a specific class
     * Get class materials
     */
    async obtenerMaterialesClase(requestParameters: ObtenerMaterialesClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Material>> {
        const response = await this.obtenerMaterialesClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes educational material from a specific class
     * Remove material from class
     */
    async quitarMaterialDeClaseRaw(requestParameters: QuitarMaterialDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling quitarMaterialDeClase().'
            );
        }

        if (requestParameters['materialId'] == null) {
            throw new runtime.RequiredError(
                'materialId',
                'Required parameter "materialId" was null or undefined when calling quitarMaterialDeClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/materials/{materialId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"materialId"}}`, encodeURIComponent(String(requestParameters['materialId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Removes educational material from a specific class
     * Remove material from class
     */
    async quitarMaterialDeClase(requestParameters: QuitarMaterialDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.quitarMaterialDeClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a professor from a specific class
     * Remove professor from class
     */
    async quitarProfesorDeClaseRaw(requestParameters: QuitarProfesorDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['claseId'] == null) {
            throw new runtime.RequiredError(
                'claseId',
                'Required parameter "claseId" was null or undefined when calling quitarProfesorDeClase().'
            );
        }

        if (requestParameters['professorId'] == null) {
            throw new runtime.RequiredError(
                'professorId',
                'Required parameter "professorId" was null or undefined when calling quitarProfesorDeClase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/clases/{claseId}/professors/{professorId}`;
        urlPath = urlPath.replace(`{${"claseId"}}`, encodeURIComponent(String(requestParameters['claseId'])));
        urlPath = urlPath.replace(`{${"professorId"}}`, encodeURIComponent(String(requestParameters['professorId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Removes a professor from a specific class
     * Remove professor from class
     */
    async quitarProfesorDeClase(requestParameters: QuitarProfesorDeClaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.quitarProfesorDeClaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
